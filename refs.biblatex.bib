
@inproceedings{abramsky2004categorical,
  title = {A Categorical Semantics of Quantum Protocols},
  booktitle = {Proceedings of the 19th {{Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}, 2004.},
  author = {Abramsky, Samson and Coecke, Bob},
  date = {2004-07},
  pages = {415--425},
  issn = {1043-6871},
  doi = {10.1109/LICS.2004.1319636},
  abstract = {Particular focus in this paper is on quantum information protocols, which exploit quantum-mechanical effects in an essential way. The particular examples we shall use to illustrate our approach will be teleportation (Benett et al., 1993), logic-gate teleportation (Gottesman and Chuang,1999), and entanglement swapping (Zukowski et al., 1993). The ideas illustrated in these protocols form the basis for novel and potentially very important applications to secure and fault-tolerant communication and computation (2001,1999,2000).},
  eventtitle = {Proceedings of the 19th {{Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}, 2004.},
  keywords = {Communication channels,Force measurement,Laboratories,Measurement standards,Performance evaluation,Protocols,Quantum computing,Quantum entanglement,Quantum mechanics,Teleportation}
}

@inproceedings{baaij2010clash,
  title = {{{ClaSH}}: {{Structural Descriptions}} of {{Synchronous Hardware Using Haskell}}},
  booktitle = {2010 13th {{Euromicro Conference}} on {{Digital System Design}}: {{Architectures}}, {{Methods}} and {{Tools}}},
  author = {Baaij, Christiaan and Kooijman, Matthijs and Kuper, Jan and Boeijink, Arjan and Gerards, Marco},
  date = {2010-09},
  pages = {714--721},
  doi = {10.1109/DSD.2010.21},
  abstract = {CλaSH is a functional hardware description language that borrows both its syntax and semantics from the functional programming language Haskell. Polymorphism and higher-order functions provide a level of abstraction and generality that allow a circuit designer to describe circuits in a more natural way than possible with the language elements found in the traditional hardware description languages. Circuit descriptions can be translated to synthesizable VHDL using the prototype CλaSH compiler. As the circuit descriptions, simulation code, and test input are also valid Haskell, complete simulations can be done by a Haskell compiler or interpreter, allowing high-speed simulation and analysis.},
  eventtitle = {2010 13th {{Euromicro Conference}} on {{Digital System Design}}: {{Architectures}}, {{Methods}} and {{Tools}}},
  keywords = {Hardware,Hardware design languages,Integrated circuit modeling,Multiplexing,Pattern matching,Prototypes,Radiation detectors}
}

@thesis{backens2016completeness,
  title = {Completeness and the {{ZX-calculus}}},
  author = {Backens, Miriam},
  date = {2016-02-29},
  eprint = {1602.08954},
  eprinttype = {arxiv},
  institution = {{University of Oxford}},
  abstract = {Graphical languages offer intuitive and rigorous formalisms for quantum physics. They can be used to simplify expressions, derive equalities, and do computations. Yet in order to replace conventional formalisms, rigour alone is not sufficient: the new formalisms also need to have equivalent deductive power. This requirement is captured by the property of completeness, which means that any equality that can be derived using some standard formalism can also be derived graphically. In this thesis, I consider the ZX-calculus, a graphical language for pure state qubit quantum mechanics. I show that it is complete for pure state stabilizer quantum mechanics, so any problem within this fragment of quantum theory can be fully analysed using graphical methods. This includes questions of central importance in areas such as error-correcting codes or measurement-based quantum computation. Furthermore, I show that the ZX-calculus is complete for the single-qubit Clifford+T group, which is approximately universal: any single-qubit unitary can be approximated to arbitrary accuracy using only Clifford gates and the T-gate. [...] Lastly, I extend the use of rigorous graphical languages outside quantum theory to Spekkens' toy theory, a local hidden variable model that nevertheless exhibits some features commonly associated with quantum mechanics. [...] I develop a graphical calculus similar to the ZX-calculus that fully describes Spekkens' toy theory, and show that it is complete. Hence, stabilizer quantum mechanics and Spekkens' toy theory can be fully analysed and compared using graphical formalisms. Intuitive graphical languages can replace conventional formalisms for the analysis of many questions in quantum computation and foundations without loss of mathematical rigour or deductive power.},
  archiveprefix = {arXiv},
  keywords = {Quantum Physics}
}

@unpublished{baez2015categories,
  title = {Categories in {{Control}}},
  author = {Baez, John C. and Erbele, Jason},
  date = {2015-05-20},
  eprint = {1405.6881},
  eprinttype = {arxiv},
  primaryclass = {quant-ph},
  abstract = {Control theory uses "signal-flow diagrams" to describe processes where real-valued functions of time are added, multiplied by scalars, differentiated and integrated, duplicated and deleted. These diagrams can be seen as string diagrams for the symmetric monoidal category FinVect\_k of finite-dimensional vector spaces over the field of rational functions k = R(s), where the variable s acts as differentiation and the monoidal structure is direct sum rather than the usual tensor product of vector spaces. For any field k we give a presentation of FinVect\_k in terms of the generators used in signal flow diagrams. A broader class of signal-flow diagrams also includes "caps" and "cups" to model feedback. We show these diagrams can be seen as string diagrams for the symmetric monoidal category FinRel\_k, where objects are still finite-dimensional vector spaces but the morphisms are linear relations. We also give a presentation for FinRel\_k. The relations say, among other things, that the 1-dimensional vector space k has two special commutative dagger-Frobenius structures, such that the multiplication and unit of either one and the comultiplication and counit of the other fit together to form a bimonoid. This sort of structure, but with tensor product replacing direct sum, is familiar from the "ZX-calculus" obeyed by a finite-dimensional Hilbert space with two mutually unbiased bases.},
  archiveprefix = {arXiv},
  keywords = {Mathematics - Category Theory,Mathematics - Quantum Algebra,Quantum Physics}
}

@unpublished{baez2018compositional,
  title = {A {{Compositional Framework}} for {{Passive Linear Networks}}},
  author = {Baez, John C. and Fong, Brendan},
  date = {2018-11-16},
  eprint = {1504.05625},
  eprinttype = {arxiv},
  abstract = {Passive linear networks are used in a wide variety of engineering applications, but the best studied are electrical circuits made of resistors, inductors and capacitors. We describe a category where a morphism is a circuit of this sort with marked input and output terminals. In this category, composition describes the process of attaching the outputs of one circuit to the inputs of another. We construct a functor, dubbed the "black box functor", that takes a circuit, forgets its internal structure, and remembers only its external behavior. Two circuits have the same external behavior if and only if they impose same relation between currents and potentials at their terminals. The space of these currents and potentials naturally has the structure of a symplectic vector space, and the relation imposed by a circuit is a Lagrangian linear relation. Thus, the black box functor goes from our category of circuits to the category of symplectic vector spaces and Lagrangian linear relations. We prove that this functor is We prove that this functor is symmetric monoidal and indeed a hypergraph functor. We assume the reader is familiar with category theory, but not with circuit theory or symplectic linear algebra.},
  archiveprefix = {arXiv},
  keywords = {Mathematical Physics,Mathematics - Category Theory}
}

@unpublished{baez2020structured,
  title = {Structured {{Cospans}}},
  author = {Baez, John C. and Courser, Kenny},
  date = {2020-11-09},
  eprint = {1911.04630},
  eprinttype = {arxiv},
  abstract = {One goal of applied category theory is to better understand networks appearing throughout science and engineering. Here we introduce "structured cospans" as a way to study networks with inputs and outputs. Given a functor \$L \textbackslash colon \textbackslash mathsf\{A\} \textbackslash to \textbackslash mathsf\{X\}\$, a structured cospan is a diagram in \$\textbackslash mathsf\{X\}\$ of the form \$L(a) \textbackslash rightarrow x \textbackslash leftarrow L(b)\$. If \$\textbackslash mathsf\{A\}\$ and \$\textbackslash mathsf\{X\}\$ have finite colimits and \$L\$ is a left adjoint, we obtain a symmetric monoidal category whose objects are those of \$\textbackslash mathsf\{A\}\$ and whose morphisms are isomorphism classes of structured cospans. This is a hypergraph category. However, it arises from a more fundamental structure: a symmetric monoidal double category where the horizontal 1-cells are structured cospans. We show how structured cospans solve certain problems in the closely related formalism of "decorated cospans", and explain how they work in some examples: electrical circuits, Petri nets, and chemical reaction networks.},
  archiveprefix = {arXiv},
  keywords = {18B10; 18M35; 18N10,Mathematics - Category Theory}
}

@unpublished{baez2022compositional,
  title = {Compositional {{Modeling}} with {{Stock}} and {{Flow Diagrams}}},
  author = {Baez, John and Li, Xiaoyan and Libkind, Sophie and Osgood, Nathaniel and Patterson, Evan},
  date = {2022-05-09},
  number = {arXiv:2205.08373},
  eprint = {2205.08373},
  eprinttype = {arxiv},
  primaryclass = {cs, math, q-bio},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2205.08373},
  abstract = {Stock and flow diagrams are widely used in epidemiology to model the dynamics of populations. Although tools already exist for building these diagrams and simulating the systems they describe, we have created a new package called StockFlow, part of the AlgebraicJulia ecosystem, which uses ideas from category theory to overcome notable limitations of existing software. Compositionality is provided by the theory of decorated cospans: stock and flow diagrams can composed to form larger ones in an intuitive way formalized by the operad of undirected wiring diagrams. Our approach also cleanly separates the syntax of stock and flow diagrams from the semantics they can be assigned. We consider semantics in ordinary differential equations, although others are possible. As an example, we explain code in StockFlow that implements a simplified version of a COVID-19 model used in Canada.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Quantitative Biology - Populations and Evolution}
}

@inproceedings{baldan2011adhesivity,
  title = {Adhesivity {{Is Not Enough}}: {{Local Church-Rosser Revisited}}},
  shorttitle = {Adhesivity {{Is Not Enough}}},
  booktitle = {Mathematical {{Foundations}} of {{Computer Science}} 2011},
  author = {Baldan, Paolo and Gadducci, Fabio and Sobociński, Pawel},
  editor = {Murlak, Filip and Sankowski, Piotr},
  date = {2011},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {48--59},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-22993-0_8},
  abstract = {Adhesive categories provide an abstract setting for the double-pushout approach to rewriting, generalising classical approaches to graph transformation. Fundamental results about parallelism and confluence, including the local Church-Rosser theorem, can be proven in adhesive categories, provided that one restricts to linear rules. We identify a class of categories, including most adhesive categories used in rewriting, where those same results can be proven in the presence of rules that are merely left-linear, i.e., rules which can merge different parts of a rewritten object. Such rules naturally emerge, e.g., when using graphical encodings for modelling the operational semantics of process calculi.},
  isbn = {978-3-642-22993-0},
  langid = {english},
  keywords = {Adhesive and extensive categories,double-pushout rewriting,local Church-Rosser property,parallel and sequential independence}
}

@incollection{belnap1977useful,
  title = {A {{Useful Four-Valued Logic}}},
  booktitle = {Modern {{Uses}} of {{Multiple-Valued Logic}}},
  author = {Belnap, Nuel D.},
  editor = {Dunn, J. Michael and Epstein, George},
  date = {1977},
  series = {Episteme},
  pages = {5--37},
  publisher = {{Springer Netherlands}},
  location = {{Dordrecht}},
  doi = {10.1007/978-94-010-1161-7_2},
  abstract = {It is argued that a sophisticated question-answering machine that has the capability of making inferences from its data base should employ a certain four-valued logic, the motivating consideration being that minor inconsistencies in its data should not be allowed to lead (as in classical logic) to irrelevant conclusions. The actual form of the four-valued logic is ‘deduced’ from an interplay of this motivating consideration with certain ideas of Dana Scott concerning ‘approximation lattices.’},
  isbn = {978-94-010-1161-7},
  langid = {english},
  keywords = {Approximation Lattice,Atomic Formula,Atomic Sentence,Complete Lattice,Epistemic State}
}

@inproceedings{berger1991inverse,
  title = {An Inverse of the Evaluation Functional for Typed Lambda -Calculus},
  booktitle = {[1991] {{Proceedings Sixth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Berger, U. and Schwichtenberg, H.},
  date = {1991-07},
  pages = {203--211},
  doi = {10.1109/LICS.1991.151645},
  abstract = {A functional p to e (procedure to expression) that inverts the evaluation functional for typed lambda -terms in any model of typed lambda -calculus containing some basic arithmetic is defined. Combined with the evaluation functional, p to e yields an efficient normalization algorithm. The method is extended to lambda -calculi with constants and is used to normalize (the lambda -representations of) natural deduction proofs of (higher order) arithmetic. A consequence of theoretical interest is a strong completeness theorem for beta eta -reduction. If two lambda -terms have the same value in some model containing representations of the primitive recursive functions (of level 1) then they are probably equal in the beta eta -calculus.{$<>$}},
  eventtitle = {[1991] {{Proceedings Sixth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  keywords = {Arithmetic,Calculus,Computer languages}
}

@article{bjesse1998lava,
  title = {Lava: Hardware Design in {{Haskell}}},
  shorttitle = {Lava},
  author = {Bjesse, Per and Claessen, Koen and Sheeran, Mary and Singh, Satnam},
  date = {1998-09-29},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {34},
  number = {1},
  pages = {174--184},
  issn = {0362-1340},
  doi = {10.1145/291251.289440},
  abstract = {Lava is a tool to assist circuit designers in specifying, designing, verifying and implementing hardware. It is a collection of Haskell modules. The system design exploits functional programming language features, such as monads and type classes, to provide multiple interpretations of circuit descriptions. These interpretations implement standard circuit analyses such as simulation, formal verification and the generation of code for the production of real circuits.Lava also uses polymorphism and higher order functions to provide more abstract and general descriptions than are possible in traditional hardware description languages. Two Fast Fourier Transform circuit examples illustrate this.}
}

@incollection{bloom1993iteration,
  title = {Iteration {{Theories}}},
  booktitle = {Iteration {{Theories}}: {{The Equational Logic}} of {{Iterative Processes}}},
  author = {Bloom, Stephen L. and Ésik, Zoltán},
  editor = {Bloom, Stephen L. and Ésik, Zoltán},
  date = {1993},
  series = {{{EATCS Monographs}} on {{Theoretical Computer Science}}},
  pages = {159--213},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-78034-9_7},
  abstract = {Iteration theories are a generalization of iterative theories. In iteration theories, the dagger operation can be applied to all morphisms f: n → n + p, producing a canonical solution of the iteration equation for f. The properties of iteration are captured equationally.},
  isbn = {978-3-642-78034-9},
  langid = {english},
  keywords = {Ideal Morphism,Iteration Theory,Pairing Identity,Parameter Identity,Permutation Identity}
}

@inproceedings{boisseau2021graphical,
  title = {Graphical {{Piecewise-Linear Algebra}}},
  author = {Boisseau, Guillaume and Piedeleu, Robin},
  date = {2021-11-06},
  eprint = {2111.03956},
  eprinttype = {arxiv},
  abstract = {Graphical (Linear) Algebra is a family of diagrammatic languages allowing to reason about different kinds of subsets of vector spaces compositionally. It has been used to model various application domains, from signal-flow graphs to Petri nets and electrical circuits. In this paper, we introduce to the family its most expressive member to date: Graphical Piecewise-Linear Algebra, a new language to specify piecewise-linear subsets of vector spaces. Like the previous members of the family, it comes with a complete axiomatisation, which means it can be used to reason about the corresponding semantic domain purely equationally, forgetting the set-theoretic interpretation. We show completeness using a single axiom on top of Graphical Polyhedral Algebra, and show that this extension is the smallest that can capture a variety of relevant constructs. Finally, we showcase its use by modelling the behaviour of stateless electronic circuits of ideal elements, a domain that had remained outside the remit of previous diagrammatic languages.},
  archiveprefix = {arXiv},
  keywords = {18M30,Computer Science - Logic in Computer Science,F.4.1,Mathematics - Category Theory}
}

@unpublished{boisseau2021string,
  title = {String {{Diagrammatic Electrical Circuit Theory}}},
  author = {Boisseau, Guillaume and Sobociński, Paweł},
  date = {2021-06-14},
  eprint = {2106.07763},
  eprinttype = {arxiv},
  abstract = {We develop a comprehensive string diagrammatic treatment of electrical circuits. Building on previous, limited case studies, we introduce controlled sources and meters as elements, and the impedance calculus, a powerful toolbox for diagrammatic reasoning on circuit diagrams. We demonstrate the power of our approach by giving comprehensive proofs of several textbook results, including the superposition theorem and Th\textbackslash 'evenin's theorem.},
  archiveprefix = {arXiv},
  keywords = {18M30,Computer Science - Logic in Computer Science}
}

@inproceedings{bonchi2014categorical,
  title = {A {{Categorical Semantics}} of {{Signal Flow Graphs}}},
  booktitle = {{{CONCUR}} 2014 – {{Concurrency Theory}}},
  author = {Bonchi, Filippo and Sobociński, Paweł and Zanasi, Fabio},
  editor = {Baldan, Paolo and Gorla, Daniele},
  date = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {435--450},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-44584-6_30},
  abstract = {We introduce IHIH\textbackslash mathbb\{IH\}, a sound and complete graphical theory of vector subspaces over the field of polynomial fractions, with relational composition. The theory is constructed in modular fashion, using Lack’s approach to composing PROPs with distributive laws.We then view string diagrams of IHIH\textbackslash mathbb\{IH\} as generalised stream circuits by using a formal Laurent series semantics. We characterize the subtheory where circuits adhere to the classical notion of signal flow graphs, and illustrate the use of the graphical calculus on several examples.},
  isbn = {978-3-662-44584-6},
  langid = {english}
}

@inproceedings{bonchi2014interacting,
  title = {Interacting {{Bialgebras Are Frobenius}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Bonchi, Filippo and Sobociński, Paweł and Zanasi, Fabio},
  editor = {Muscholl, Anca},
  date = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {351--365},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-54830-7_23},
  abstract = {Bialgebras and Frobenius algebras are different ways in which monoids and comonoids interact as part of the same theory. Such theories feature in many fields: e.g. quantum computing, compositional semantics of concurrency, network algebra and component-based programming.In this paper we study an important sub-theory of Coecke and Duncan’s ZX-calculus, related to strongly-complementary observables, where two Frobenius algebras interact. We characterize its free model as a category of ℤ2-vector subspaces. Moreover, we use the framework of PROPs to exhibit the modular structure of its algebra via a universal construction involving span and cospan categories of ℤ2-matrices and distributive laws between PROPs. Our approach demonstrates that the Frobenius structures result from the interaction of bialgebras.},
  isbn = {978-3-642-54830-7},
  langid = {english},
  keywords = {Compositional Semantic,Follow Diagram Commute,Free Prop,Monoidal Category,Monoidal Functor}
}

@article{bonchi2015full,
  title = {Full {{Abstraction}} for {{Signal Flow Graphs}}},
  author = {Bonchi, Filippo and Sobociński, Pawel and Zanasi, Fabio},
  date = {2015-01-14},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {50},
  number = {1},
  pages = {515--526},
  issn = {0362-1340},
  doi = {10.1145/2775051.2676993},
  abstract = {Network theory uses the string diagrammatic language of monoidal categories to study graphical structures formally, eschewing specialised translations into intermediate formalisms. Recently, there has been a concerted research focus on developing a network theoretic approach to signal flow graphs, which are classical structures in control theory, signal processing and a cornerstone in the study of feedback. In this approach, signal flow graphs are given a relational denotational semantics in terms of formal power series. Thus far, the operational behaviour of such signal flow graphs has only been discussed at an intuitive level. In this paper we equip them with a structural operational semantics. As is typically the case, the purely operational picture is too concrete -- two graphs that are denotationally equal may exhibit different operational behaviour. We classify the ways in which this can occur and show that any graph can be realised -- rewritten, using the graphical theory, into an executable form where the operational behavior and the denotation coincides.},
  keywords = {full abstraction,props,signal flow graphs,string diagrams,structural operational semantics}
}

@inproceedings{bonchi2016rewriting,
  title = {Rewriting modulo Symmetric Monoidal Structure},
  booktitle = {Proceedings of the 31st {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Paweł and Zanasi, Fabio},
  date = {2016-07-05},
  series = {{{LICS}} '16},
  pages = {710--719},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2933575.2935316},
  abstract = {String diagrams are a powerful and intuitive graphical syntax for terms of symmetric monoidal categories (SMCs). They find many applications in computer science and are becoming increasingly relevant in other fields such as physics and control theory. An important role in many such approaches is played by equational theories of diagrams, typically oriented and applied as rewrite rules. This paper lays a comprehensive foundation for this form of rewriting. We interpret diagrams combinatorially as typed hypergraphs and establish the precise correspondence between diagram rewriting modulo the laws of SMCs on the one hand and double pushout (DPO) rewriting of hypergraphs, subject to a soundness condition called convexity, on the other. This result rests on a more general characterisation theorem in which we show that typed hypergraph DPO rewriting amounts to diagram rewriting modulo the laws of SMCs with a chosen special Frobenius structure. We illustrate our approach with a proof of termination for the theory of non-commutative bimonoids.},
  isbn = {978-1-4503-4391-6}
}

@inproceedings{bonchi2017confluence,
  title = {Confluence of {{Graph Rewriting}} with {{Interfaces}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Paweł and Zanasi, Fabio},
  editor = {Yang, Hongseok},
  date = {2017},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {141--169},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-54434-1_6},
  abstract = {For terminating double-pushout (DPO) graph rewriting systems confluence is, in general, undecidable. We show that confluence is decidable for an extension of DPO rewriting to graphs with interfaces. This variant is important due to it being closely related to rewriting of string diagrams. We show that our result extends, under mild conditions, to decidability of confluence for terminating rewriting systems of string diagrams in symmetric monoidal categories.},
  isbn = {978-3-662-54434-1},
  langid = {english},
  keywords = {Adhesive categories,Confluence,DPO rewriting systems,PROPs,String diagrams}
}

@article{bonchi2017interacting,
  title = {Interacting {{Hopf}} Algebras},
  author = {Bonchi, Filippo and Sobociński, Paweł and Zanasi, Fabio},
  date = {2017-01-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {221},
  number = {1},
  pages = {144--184},
  issn = {0022-4049},
  doi = {10.1016/j.jpaa.2016.06.002},
  abstract = {We introduce the theory IHR of interacting Hopf algebras, parametrised over a principal ideal domain R. The axioms of IHR are derived using Lack's approach to composing PROPs: they feature two Hopf algebra and two Frobenius algebra structures on four different monoid–comonoid pairs. This construction is instrumental in showing that IHR is isomorphic to the PROP of linear relations (i.e. subspaces) over the field of fractions of R.},
  langid = {english}
}

@inproceedings{bonchi2017refinement,
  title = {Refinement for {{Signal Flow Graphs}}},
  booktitle = {28th {{International Conference}} on {{Concurrency Theory}} ({{CONCUR}} 2017)},
  author = {Bonchi, Filippo and Holland, Joshua and Pavlovic, Dusko and Sobociński, Pawel},
  editor = {Meyer, Roland and Nestmann, Uwe},
  date = {2017},
  series = {Leibniz {{International Proceedings}} in {{Informatics}} ({{LIPIcs}})},
  volume = {85},
  pages = {24:1--24:16},
  publisher = {{Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik}},
  location = {{Dagstuhl, Germany}},
  issn = {1868-8969},
  doi = {10.4230/LIPIcs.CONCUR.2017.24},
  isbn = {978-3-95977-048-4},
  keywords = {operational semantics,refinement,Signal flow graphs,string diagrams,symmetric monoidal inequality theory}
}

@unpublished{bonchi2018graphical,
  title = {Graphical {{Conjunctive Queries}}},
  author = {Bonchi, Filippo and Seeber, Jens and Sobocinski, Pawel},
  date = {2018-04-20},
  eprint = {1804.07626},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {The Calculus of Conjunctive Queries (CCQ) has foundational status in database theory. A celebrated theorem of Chandra and Merlin states that CCQ query inclusion is decidable. Its proof transforms logical formulas to graphs: each query has a natural model - a kind of graph - and query inclusion reduces to the existence of a graph homomorphism between natural models. We introduce the diagrammatic language Graphical Conjunctive Queries (GCQ) and show that it has the same expressivity as CCQ. GCQ terms are string diagrams, and their algebraic structure allows us to derive a sound and complete axiomatisation of query inclusion, which turns out to be exactly Carboni and Walters' notion of cartesian bicategory of relations. Our completeness proof exploits the combinatorial nature of string diagrams as (certain cospans of) hypergraphs: Chandra and Merlin's insights inspire a theorem that relates such cospans with spans. Completeness and decidability of the (in)equational theory of GCQ follow as a corollary. Categorically speaking, our contribution is a model-theoretic completeness theorem of free cartesian bicategories (on a relational signature) for the category of sets and relations.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science}
}

@inproceedings{bonchi2018rewriting,
  title = {Rewriting with {{Frobenius}}},
  booktitle = {Proceedings of the 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Pawel and Zanasi, Fabio},
  date = {2018-07-09},
  series = {{{LICS}} '18},
  pages = {165--174},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3209108.3209137},
  abstract = {Symmetric monoidal categories have become ubiquitous as a formal environment for the analysis of compound systems in a compositional, resource-sensitive manner using the graphical syntax of string diagrams. Recently, reasoning with string diagrams has been implemented concretely via double-pushout (DPO) hypergraph rewriting. The hypergraph representation has the twin advantages of being convenient for mechanisation and of completely absorbing the structural laws of symmetric monoidal categories, leaving just the domain-specific equations explicit in the rewriting system. In many applications across different disciplines (linguistics, concurrency, quantum computation, control theory,...) the structural component appears to be richer than just the symmetric monoidal structure, as it includes one or more Frobenius algebras. In this work we develop a DPO rewriting formalism which is able to absorb multiple Frobenius structures, thus sensibly simplifying diagrammatic reasoning in the aforementioned applications. As a proof of concept, we use our formalism to describe an algorithm which computes the reduced form of a diagram of the theory of interacting bialgebras using a simple rewrite strategy.},
  isbn = {978-1-4503-5583-4},
  keywords = {DPO graph rewriting,Frobenius algebra,PROP,symmetric monoidal category}
}

@inproceedings{bonchi2019graphical,
  title = {Graphical {{Affine Algebra}}},
  booktitle = {2019 34th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  author = {Bonchi, Filippo and Piedeleu, Robin and Sobociński, Pawel and Zanasi, Fabio},
  date = {2019-06},
  pages = {1--12},
  doi = {10.1109/LICS.2019.8785877},
  abstract = {Graphical linear algebra is a diagrammatic language allowing to reason compositionally about different types of linear computing devices. In this paper, we extend this formalism with a connector for affine behaviour. The extension, which we call graphical affine algebra, is simple but remarkably powerful: it can model systems with richer patterns of behaviour such as mutual exclusion-with modules over the natural numbers as semantic domain-or non-passive electrical components-when considering modules over a certain field. Our main technical contribution is a complete axiomatisation for graphical affine algebra over these two interpretations. We also show, as case studies, how graphical affine algebra captures electrical circuits and the calculus of stateless connectors-a coordination language for distributed systems.},
  eventtitle = {2019 34th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  keywords = {Algebra,Calculus,Connectors,Gallium arsenide,Semantics,Syntactics,Wires}
}

@article{bonchi2020string,
  title = {String {{Diagram Rewrite Theory I}}: {{Rewriting}} with {{Frobenius Structure}}},
  shorttitle = {String {{Diagram Rewrite Theory I}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Pawel and Zanasi, Fabio},
  date = {2020-12-03},
  journaltitle = {CoRR},
  volume = {abs/2012.01847},
  eprint = {2012.01847},
  eprinttype = {arxiv},
  abstract = {String diagrams are a powerful and intuitive graphical syntax, originated in the study of symmetric monoidal categories. In the last few years, they have found application in the modelling of various computational structures, in fields as diverse as Computer Science, Physics, Control Theory, Linguistics, and Biology. In many such proposals, the transformations of the described systems are modelled as rewrite rules of diagrams. These developments demand a mathematical foundation for string diagram rewriting: whereas rewrite theory for terms is well-understood, the two-dimensional nature of string diagrams poses additional challenges. This work systematises and expands a series of recent conference papers laying down such foundation. As first step, we focus on the case of rewrite systems for string diagrammatic theories which feature a Frobenius algebra. This situation ubiquitously appear in various approaches: for instance, in the algebraic semantics of linear dynamical systems, Frobenius structures model the wiring of circuits; in categorical quantum mechanics, they model interacting quantum observables. Our work introduces a combinatorial interpretation of string diagram rewriting modulo Frobenius structures, in terms of double-pushout hypergraph rewriting. Furthermore, we prove this interpretation to be sound and complete. In the last part, we also see that the approach can be generalised to model rewriting modulo multiple Frobenius structures. As a proof of concept, we show how to derive from these results a termination strategy for Interacting Bialgebras, an important rewrite theory in the study of quantum circuits and signal flow graphs.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory}
}

@article{bonchi2021string,
  title = {String {{Diagram Rewrite Theory II}}: {{Rewriting}} with {{Symmetric Monoidal Structure}}},
  shorttitle = {String {{Diagram Rewrite Theory II}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Pawel and Zanasi, Fabio},
  date = {2021-04-29},
  journaltitle = {CoRR},
  volume = {abs/2104.14686},
  eprint = {2104.14686},
  eprinttype = {arxiv},
  abstract = {Symmetric monoidal theories (SMTs) generalise algebraic theories in a way that make them suitable to express resource-sensitive systems, in which variables cannot be copied or discarded at will. In SMTs, traditional tree-like terms are replaced by string diagrams, topological entities that can be intuitively thoughts as diagrams of wires and boxes. Recently, string diagrams have become increasingly popular as a graphical syntax to reason about computational models across diverse fields, including programming language semantics, circuit theory, quantum mechanics, linguistics, and control theory. In applications, it is often convenient to implement the equations appearing in SMTs as rewriting rules. This poses the challenge of extending the traditional theory of term rewriting, which has been developed for algebraic theories, to string diagrams. In this paper, we develop a mathematical theory of string diagram rewriting for SMTs. Our approach exploits the correspondence between string diagram rewriting and double pushout (DPO) rewriting of certain graphs, introduced in the first paper of this series. Such a correspondence is only sound when the SMT includes a Frobenius algebra structure. In the present work, we show how an analogous correspondence may be established for arbitrary SMTs, once an appropriate notion of DPO rewriting (which we call convex) is identified. As proof of concept, we use our approach to show termination of two SMTs of interest: Frobenius semi-algebras and bialgebras.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Mathematics - Logic}
}

@article{bonchi2021stringa,
  title = {String {{Diagram Rewrite Theory III}}: {{Confluence}} with and without {{Frobenius}}},
  shorttitle = {String {{Diagram Rewrite Theory III}}},
  author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Paweł and Zanasi, Fabio},
  date = {2021-09-13},
  journaltitle = {CoRR},
  volume = {abs/2109.06049},
  eprint = {2109.06049},
  eprinttype = {arxiv},
  abstract = {In this paper we address the problem of proving confluence for string diagram rewriting, which was previously shown to be characterised combinatorically as double-pushout rewriting with interfaces (DPOI) on (labelled) hypergraphs. For standard DPO rewriting without interfaces, confluence for terminating rewrite systems is, in general, undecidable. Nevertheless, we show here that confluence for DPOI, and hence string diagram rewriting, is decidable. We apply this result to give effective procedures for deciding local confluence of symmetric monoidal theories with and without Frobenius structure by critical pair analysis. For the latter, we introduce the new notion of path joinability for critical pairs, which enables finitely many joins of a critical pair to be lifted to an arbitrary context in spite of the strong non-local constraints placed on rewriting in a generic symmetric monoidal theory.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science}
}

@inproceedings{bonsangue2008coalgebraic,
  title = {Coalgebraic {{Logic}} and {{Synthesis}} of {{Mealy Machines}}},
  booktitle = {Foundations of {{Software Science}} and {{Computational Structures}}},
  author = {Bonsangue, M. M. and Rutten, Jan and Silva, Alexandra},
  editor = {Amadio, Roberto},
  date = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {231--245},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-78499-9_17},
  abstract = {We present a novel coalgebraic logic for deterministic Mealy machines that is sound, complete and expressive w.r.t. bisimulation. Every finite Mealy machine corresponds to a finite formula in the language. For the converse, we give a compositional synthesis algorithm which transforms every formula into a finite Mealy machine whose behaviour is exactly the set of causal functions satisfying the formula.},
  isbn = {978-3-540-78499-9},
  langid = {english},
  keywords = {Causal Function,Mealy Machine,Modal Formula,Proof System,Simulation Relation}
}

@inproceedings{bryant1991formal,
  title = {Formal Verification of Digital Circuits Using Symbolic Ternary System Models},
  booktitle = {Computer-{{Aided Verification}}},
  author = {Bryant, Randal E. and Seger, Carl-Johan H.},
  editor = {Clarke, Edmund M. and Kurshan, Robert P.},
  date = {1991},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {33--43},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/BFb0023717},
  abstract = {Ternary system modeling involves extending the traditional set of binary values \{0, 1\} with a third value X indicating an unknown or indeterminate condition. By making this extension, we can model a wider range of circuit phenomena. We can also efficiently verify sequential circuits in which the effect of a given operation depends on only a subset of the total system state.This paper presents a formal methodology for verifying synchronous digital circuits using a ternary system model. The desired behavior of the circuit is expressed as assertions in a notation using a combination of Boolean expressions and temporal logic operators. An assertion is verified by translating it into a sequence of patterns and checks for a ternary symbolic simulator. The methodology has been used to verify a number of full scale designs.},
  isbn = {978-3-540-38394-9},
  langid = {english},
  keywords = {Boolean Expression,Boolean Function,Excitation Function,Formal Verification,State Sequence}
}

@article{buchfuhrer2011complexity,
  title = {The Complexity of {{Boolean}} Formula Minimization},
  author = {Buchfuhrer, David and Umans, Christopher},
  date = {2011-01-01},
  journaltitle = {Journal of Computer and System Sciences},
  shortjournal = {Journal of Computer and System Sciences},
  series = {Celebrating {{Karp}}'s {{Kyoto Prize}}},
  volume = {77},
  number = {1},
  pages = {142--153},
  issn = {0022-0000},
  doi = {10.1016/j.jcss.2010.06.011},
  abstract = {The Minimum Equivalent Expression problem is a natural optimization problem in the second level of the Polynomial-Time Hierarchy. It has long been conjectured to be Σ2P-complete and indeed appears as an open problem in Garey and Johnson (1979) [5]. The depth-2 variant was only shown to be Σ2P-complete in 1998 (Umans (1998) [13], Umans (2001) [15]) and even resolving the complexity of the depth-3 version has been mentioned as a challenging open problem. We prove that the depth-k version is Σ2P-complete under Turing reductions for all k⩾3. We also settle the complexity of the original, unbounded depth Minimum Equivalent Expression problem, by showing that it too is Σ2P-complete under Turing reductions.},
  langid = {english},
  keywords = {Computational complexity,Formula minimization,Logic synthesis,Polynomial-Time Hierarchy,Turing reduction}
}

@inproceedings{castellan2016causality,
  title = {Causality vs. Interleavings in Concurrent Game Semantics},
  author = {Castellan, Simon and Clairambault, Pierre},
  date = {2016-08-23},
  volume = {32},
  pages = {1},
  doi = {10.4230/LIPIcs.CONCUR.2016.32},
  abstract = {We investigate relationships between interleaving and causal notions of game semantics for concurrent programming languages, focusing on the existence of canonical compact causal representations of the interleaving game semantics of programs. We perform our study on an affine variant of Idealized Parallel Algol (IPA), for which we present two games model: an interleaving model (an adaptation of Ghica and Murawski's fully abstract games model for IPA up to may-testing), and a causal model (a variant of Rideau and Winskel's games on event structures). Both models are sound and adequate for affine IPA. Then, we relate the two models. First we give a causality-forgetting operation mapping functorially the causal model to the interleaving one. We show that from an interleaving strategy we can reconstruct a causal strategy, from which it follows that the interleaving model is the observational quotient of the causal one. Then, we investigate several reconstructions of causal strategies from interleaving ones, showing finally that there are programs which are inherently causally ambiguous, with several distinct minimal causal representations.},
  eventtitle = {The 27th {{International Conference}} on {{Concurrency Theory}} ({{CONCUR}} 2016)},
  langid = {english}
}

@article{cazanescu1990new,
  title = {Towards a {{New Algebraic Foundation}} of {{Flowchart Scheme Theory}}},
  author = {Căzănescu, Virgil Emil and Ştefănescu, Gheorghe},
  date = {1990-01-01},
  journaltitle = {Fundamenta Informaticae},
  volume = {13},
  number = {2},
  pages = {171--210},
  publisher = {{IOS Press}},
  issn = {0169-2968},
  doi = {10.3233/FI-1990-13204},
  abstract = {We develope a formalism for the algebraic study of flowchart schemes and their behaviours, based on a new axiomatic looping operation, called feedback. This formalism is based on certain flownomial expressions . Such an expression is built up from tw},
  langid = {english}
}

@incollection{cazanescu1994feedback,
  title = {Feedback, {{Iteration}}, and {{Repetition}}},
  booktitle = {Mathematical {{Aspects}} of {{Natural}} and {{Formal Languages}}},
  author = {Căzănescu, Virgil Emil and Ştefănescu, Gheorghe},
  date = {1994-10-01},
  series = {World {{Scientific Series}} in {{Computer Science}}},
  volume = {Volume 43},
  number = {Volume 43},
  pages = {43--61},
  publisher = {{World Scientific}},
  doi = {10.1142/9789814447133_0003},
  isbn = {978-981-02-1914-7}
}

@article{cicala2020rewriting,
  title = {Rewriting {{Structured Cospans}}},
  author = {Cicala, Daniel},
  date = {2020-01-24},
  journaltitle = {CoRR},
  volume = {abs/2001.09029},
  eprint = {2001.09029},
  eprinttype = {arxiv},
  abstract = {To foster the study of networks on an abstract level, we further study the formalism of structured cospans. We define a topos of structured cospans and establish its theory of rewriting. For the rewrite relation, we propose a double categorical semantics to encode the compositionality of the structure cospans. For an application, we generalize the inductive viewpoint of graph rewriting to rewriting in a wider class of topoi.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Formal Languages and Automata Theory,Computer Science - Social and Information Networks,Mathematics - Category Theory}
}

@inproceedings{coecke2008interacting,
  title = {Interacting {{Quantum Observables}}},
  booktitle = {Automata, {{Languages}} and {{Programming}}},
  author = {Coecke, Bob and Duncan, Ross},
  editor = {Aceto, Luca and Damgård, Ivan and Goldberg, Leslie Ann and Halldórsson, Magnús M. and Ingólfsdóttir, Anna and Walukiewicz, Igor},
  date = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {298--310},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-70583-3_25},
  abstract = {We formalise the constructive content of an essential feature of quantum mechanics: the interaction of complementary quantum observables, and information flow mediated by them. Using a general categorical formulation, we show that pairs of mutually unbiased quantum observables form bialgebra-like structures. We also provide an abstract account on the quantum data encoded in complex phases, and prove a normal form theorem for it. Together these enable us to describe all observables of finite dimensional Hilbert space quantum mechanics. The resulting equations suffice to perform computations with elementary quantum gates, translate between distinct quantum computational models, establish the equivalence of entangled quantum states, and simulate quantum algorithms such as the quantum Fourier transform. All these computations moreover happen within an intuitive diagrammatic calculus.},
  isbn = {978-3-540-70583-3},
  langid = {english},
  keywords = {Bloch Sphere,Classical Point,Classical Structure,Monoidal Structure,Quantum Observable}
}

@article{coecke2010mathematical,
  title = {Mathematical {{Foundations}} for a {{Compositional Distributional Model}} of {{Meaning}}},
  author = {Coecke, Bob and Sadrzadeh, Mehrnoosh and Clark, Stephen},
  date = {2010-03-23},
  journaltitle = {CoRR},
  volume = {abs/1003.4394},
  eprint = {1003.4394},
  eprinttype = {arxiv},
  abstract = {We propose a mathematical framework for a unification of the distributional theory of meaning in terms of vector space models, and a compositional theory for grammatical types, for which we rely on the algebra of Pregroups, introduced by Lambek. This mathematical framework enables us to compute the meaning of a well-typed sentence from the meanings of its constituents. Concretely, the type reductions of Pregroups are `lifted' to morphisms in a category, a procedure that transforms meanings of constituents into a meaning of the (well-typed) whole. Importantly, meanings of whole sentences live in a single space, independent of the grammatical structure of the sentence. Hence the inner-product can be used to compare meanings of arbitrary sentences, as it is for comparing the meanings of words in the distributional model. The mathematical structure we employ admits a purely diagrammatic calculus which exposes how the information flows between the words in a sentence in order to make up the meaning of the whole sentence. A variation of our `categorical model' which involves constraining the scalars of the vector spaces to the semiring of Booleans results in a Montague-style Boolean-valued semantics.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computation and Language,Computer Science - Logic in Computer Science,Mathematics - Category Theory}
}

@inproceedings{coecke2018picturing,
  title = {Picturing {{Quantum Processes}}},
  booktitle = {Diagrammatic {{Representation}} and {{Inference}}},
  author = {Coecke, Bob and Kissinger, Aleks},
  editor = {Chapman, Peter and Stapleton, Gem and Moktefi, Amirouche and Perez-Kriz, Sarah and Bellucci, Francesco},
  date = {2018},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {28--31},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-91376-6_6},
  abstract = {We provide a self-contained introduction to quantum theory using a unique diagrammatic language. Far from simple visual aids, the diagrams we use are mathematical objects in their own right, which allow us to develop from first principles a completely rigorous treatment of ‘textbook’ quantum theory. Additionally, the diagrammatic treatment eliminates the need for the typical prerequisites of a standard course on the subject, making it suitable for a multi-disciplinary audience with no prior knowledge in physics or advanced mathematics.By subscribing to a diagrammatic treatment of quantum theory we place emphasis on quantum processes, rather than individual systems, and study how uniquely quantum features arise as processes compose and interact across time and space. We introduce the notion of a process theory, and from this develop the notions of pure and mixed quantum maps, measurements and classical data, quantum teleportation and cryptography, models of quantum computation, quantum algorithms, and quantum non-locality. The primary mode of calculation in this tutorial is diagram transformations, where simple local identities on diagrams are used to explain and derive the behaviour of many kinds of quantum processes.This tutorial roughly follows a new textbook published by Cambridge University Press in 2017 with the same title.},
  isbn = {978-3-319-91376-6},
  langid = {english}
}

@inproceedings{corbyn2022proof,
  title = {The Proof Assistant Homotopy.Io},
  author = {Corbyn, Nathan and Heidemann, Lukas and Hu, Nick and Tataru, Calin and Vicary, Jamie},
  date = {2022},
  doi = {10.5281/zenodo.2540764}
}

@incollection{corradini1997algebraic,
  title = {Algebraic Approaches to Graph Transformation ? Part i: Basic Concepts and Double Pushout Approach},
  shorttitle = {Algebraic Approaches to Graph Transformation ?},
  booktitle = {Handbook of {{Graph Grammars}} and {{Computing}} by {{Graph Transformation}}},
  author = {Corradini, A. and Montanari, U. and Rossi, F. and Ehrig, H. and Heckel, R. and Löwe, M.},
  date = {1997-02-01},
  pages = {163--245},
  publisher = {{World Scientific}},
  doi = {10.1142/9789812384720_0003},
  isbn = {978-981-02-2884-2}
}

@unpublished{corradini2022completeness,
  title = {Completeness and Expressiveness for Gs-Monoidal Categories},
  author = {Corradini, Andrea and Gadducci, Fabio and Trotta, Davide},
  date = {2022-05-13},
  number = {arXiv:2205.06892},
  eprint = {2205.06892},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2205.06892},
  abstract = {Formalised in the study of symmetric monoidal categories, string diagrams are a graphical syntax that has found applications in many areas of Computer Science. Our work aims at systematising and expanding what could be thought of as the core of this visual formalism for dealing with relations and partial functions. To this end, we identify gs-monoidal categories and their graphical representation as a convenient, minimal structure that is useful to formally express such notions. More precisely, to show that such structures naturally arise, we prove that the Kleisli category of a strong commutative monad over a cartesian category is gs-monoidal. Then, we discuss how other categories providing a formalisation of "partial arrows", such as p-categories and restriction categories, are related to gs-monoidal categories. This naturally introduces a pre-order enrichment on gs-monoidal categories, and an equivalence of arrows, called "gs-equivalence": we conclude presenting a completeness result of this equivalence for models defined as lax functors to \$\textbackslash mathbf\{Rel\}\$.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,F.3,F.4,Mathematics - Category Theory}
}

@inproceedings{dilavore2021canonical,
  title = {A {{Canonical Algebra}} of {{Open Transition Systems}}},
  booktitle = {Formal {{Aspects}} of {{Component Software}}},
  author = {Di Lavore, Elena and Gianola, Alessandro and Román, Mario and Sabadini, Nicoletta and Sobociński, Paweł},
  editor = {Salaün, Gwen and Wijs, Anton},
  date = {2021},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {63--81},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-90636-8_4},
  abstract = {Feedback and state are closely interrelated concepts. Categories with feedback, originally proposed by Katis, Sabadini and Walters, are a weakening of the notion of traced monoidal categories, with several pertinent applications in computer science. The construction of the free such categories has appeared in several different contexts, and can be considered as state bootstrapping. We show that a categorical algebra for open transition systems, \textbackslash mathbf \{Span\}(\textbackslash mathbf \{Graph\})\_*Span(Graph)∗\textbackslash mathbf \{Span\}(\textbackslash mathbf \{Graph\})\_*, also due to Katis, Sabadini and Walters, is the free category with feedback over \textbackslash mathbf \{Span\}(\textbackslash mathbf \{Set\})Span(Set)\textbackslash mathbf \{Span\}(\textbackslash mathbf \{Set\}). This algebra of transition systems is obtained by adding state to an algebra of predicates, and therefore \textbackslash mathbf \{Span\}(\textbackslash mathbf \{Graph\})\_*Span(Graph)∗\textbackslash mathbf \{Span\}(\textbackslash mathbf \{Graph\})\_* is the canonical such algebra.},
  isbn = {978-3-030-90636-8},
  langid = {english}
}

@unpublished{dilavore2022monoidal,
  title = {Monoidal {{Streams}} for {{Dataflow Programming}}},
  author = {Di Lavore, Elena and de Felice, Giovanni and Román, Mario},
  options = {useprefix=true},
  date = {2022-02-04},
  eprint = {2202.02061},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  abstract = {We introduce monoidal streams: a generalization of causal stream functions to monoidal categories. In the same way that streams provide semantics to dataflow programming with pure functions, monoidal streams provide semantics to dataflow programming with theories of processes represented by a symmetric monoidal category. At the same time, monoidal streams form a feedback monoidal category, which can be used to interpret signal flow graphs. As an example, we study a stochastic dataflow language.},
  archiveprefix = {arXiv},
  keywords = {18M05,Computer Science - Logic in Computer Science,Computer Science - Programming Languages,Mathematics - Category Theory}
}

@unpublished{dilavore2022monoidala,
  title = {Monoidal {{Width}}},
  author = {Di Lavore, Elena and Sobociński, Paweł},
  date = {2022-02-15},
  eprint = {2202.07582},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  abstract = {We introduce monoidal width as a measure of the difficulty of decomposing morphisms in monoidal categories. For graphs, we show that monoidal width and two variations capture existing notions, namely branch width, tree width and path width. Through these and other examples, we propose that monoidal width: (i) is a promising concept that, while capturing known measures, can similarly be instantiated in other settings, avoiding the need for ad-hoc domain-specific definitions and (ii) comes with a general, formal algebraic notion of decomposition using the language of monoidal categories.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory}
}

@unpublished{dilavore2022monoidalb,
  title = {Monoidal {{Width}}: {{Capturing Rank Width}}},
  shorttitle = {Monoidal {{Width}}},
  author = {Di Lavore, Elena and Sobociński, Paweł},
  date = {2022-05-18},
  number = {arXiv:2205.08916},
  eprint = {2205.08916},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2205.08916},
  abstract = {Monoidal width was recently introduced by the authors as a measure of the complexity of decomposing morphisms in monoidal categories. We have shown that in a monoidal category of cospans of graphs, monoidal width and its variants can be used to capture tree width, path width and branch width. In this paper we study monoidal width in a category of matrices, and in an extension to a different monoidal category of open graphs, where the connectivity information is handled with matrix algebra and graphs are composed along edges instead of vertices. We show that here monoidal width captures rank width: a measure of graph complexity that has received much attention in recent years.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory}
}

@article{dixon2010open,
  title = {Open {{Graphs}} and {{Computational Reasoning}}},
  author = {Dixon, Lucas and Duncan, Ross and Kissinger, Aleks},
  date = {2010-06-09},
  journaltitle = {Electronic Proceedings in Theoretical Computer Science},
  shortjournal = {Electron. Proc. Theor. Comput. Sci.},
  volume = {26},
  eprint = {1007.3794},
  eprinttype = {arxiv},
  pages = {169--180},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.26.16},
  abstract = {We present a form of algebraic reasoning for computational objects which are expressed as graphs. Edges describe the flow of data between primitive operations which are represented by vertices. These graphs have an interface made of half-edges (edges which are drawn with an unconnected end) and enjoy rich compositional principles by connecting graphs along these half-edges. In particular, this allows equations and rewrite rules to be specified between graphs. Particular computational models can then be encoded as an axiomatic set of such rules. Further rules can be derived graphically and rewriting can be used to simulate the dynamics of a computational system, e.g. evaluating a program on an input. Examples of models which can be formalised in this way include traditional electronic circuits as well as recent categorical accounts of quantum information.},
  archiveprefix = {arXiv},
  version = {1},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Mathematical Software,Computer Science - Symbolic Computation}
}

@article{dixon2013opengraphs,
  title = {Open-Graphs and Monoidal Theories†},
  author = {Dixon, Lucas and Kissinger, Aleks},
  date = {2013-04},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {23},
  number = {2},
  pages = {308--359},
  publisher = {{Cambridge University Press}},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129512000138},
  abstract = {String diagrams are a powerful tool for reasoning about physical processes, logic circuits, tensor networks and many other compositional structures. The distinguishing feature of these diagrams is that edges need not be connected to vertices at both ends, and these unconnected ends can be interpreted as the inputs and outputs of a diagram. In this paper, we give a concrete construction for string diagrams using a special kind of typed graph called an open-graph. While the category of open-graphs is not itself adhesive, we introduce the notion of a selective adhesive functor, and show that such a functor embeds the category of open-graphs into the ambient adhesive category of typed graphs. Using this functor, the category of open-graphs inherits ‘enough adhesivity’ from the category of typed graphs to perform double-pushout (DPO) graph rewriting. A salient feature of our theory is that it ensures rewrite systems are ‘type safe’ in the sense that rewriting respects the inputs and outputs. This formalism lets us safely encode the interesting structure of a computational model, such as evaluation dynamics, with succinct, explicit rewrite rules, while the graphical representation absorbs many of the tedious details. Although topological formalisms exist for string diagrams, our construction is discrete and finitary, and enjoys decidable algorithms for composition and rewriting. We also show how open-graphs can be parameterised by graphical signatures, which are similar to the monoidal signatures of Joyal and Street, and define types for vertices in the diagrammatic language and constraints on how they can be connected. Using typed open-graphs, we can construct free symmetric monoidal categories, PROPs and more general monoidal theories. Thus, open-graphs give us a tool for mechanised reasoning in monoidal categories.},
  langid = {english}
}

@inproceedings{ehrig1973graphgrammars,
  title = {Graph-Grammars: {{An}} Algebraic Approach},
  shorttitle = {Graph-Grammars},
  booktitle = {14th {{Annual Symposium}} on {{Switching}} and {{Automata Theory}} (Swat 1973)},
  author = {Ehrig, H. and Pfender, M. and Schneider, H. J.},
  date = {1973-10},
  pages = {167--180},
  issn = {0272-4847},
  doi = {10.1109/SWAT.1973.11},
  abstract = {The paper presents an algebraic theory of graph-grammars using homomorphisms and pushout-constructions to specify embeddings and direct derivations constructively. We consider the case of arbitrary directed graphs permitting loops and parallel edges. The gluing of two arbitrary labeled graphs (push-out) is defined allowing a strictly symmetric definition of direct derivations and the embedding of derivations into a common frame. A two-dimensional hierarchy of graph-grammars is given including the classical case of Chomsky-grammars and several other graphgrammar constructions as special types. The use of well-known categorical constructions and results allows simplification of the proofs and pregnant formulation of concepts like "parallel composition" and "translation of grammars".},
  eventtitle = {14th {{Annual Symposium}} on {{Switching}} and {{Automata Theory}} (Swat 1973)},
  keywords = {Labeling,Pattern recognition,Pregnancy,Production}
}

@article{ehrig1991parallelism,
  title = {Parallelism and Concurrency in High-Level Replacement Systems},
  author = {Ehrig, Hartmut and Habel, Annegret and Kreowski, Hans-Jörg and Parisi-Presicce, Francesco},
  date = {1991-11},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {1},
  number = {3},
  pages = {361--404},
  publisher = {{Cambridge University Press}},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129500001353},
  abstract = {High-level replacement systems are formulated in an axiomatic algebraic framework based on categories pushouts. This approach generalizes the well-known algebraic approach to graph grammars and several other types of replacement systems, especially the replacement of algebraic specifications which was recently introduced for a rule-based approach to modular system design.in this paper basic notions like productions, derivations, parellel and sequential independence are introduced for high-level replacement syetms leading to Church-Rosser, Parallelism and concurrency Theorems previously shown in the literature for special cases only. In the general case of high-level replacement systems specific conditions, called HLR1- and HLR2-conditions, are formulated in order to obtain these results.Several examples of high-level replacement systems are discussed and classified w.r.t. HLR1- and HLR2-conditions showing which of the results are valid in each case.},
  langid = {english}
}

@inproceedings{ehrig2004deriving,
  title = {Deriving {{Bisimulation Congruences}} in the {{DPO Approach}} to {{Graph Rewriting}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Ehrig, Hartmut and König, Barbara},
  editor = {Walukiewicz, Igor},
  date = {2004},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {151--166},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-24727-2_12},
  abstract = {Motivated by recent work on the derivation of labelled transitions and bisimulation congruences from unlabelled reaction rules, we show how to solve this problem in the DPO (double-pushout) approach to graph rewriting. Unlike in previous approaches, we consider graphs as objects, instead of arrows, of the category under consideration. This allows us to present a very simple way of deriving labelled transitions (called rewriting steps with borrowed context) which smoothly integrates with the DPO approach, has a very constructive nature and requires only a minimum of category theory. The core part of this paper is the proof sketch that the bisimilarity based on rewriting with borrowed contexts is a congruence relation.},
  isbn = {978-3-540-24727-2},
  langid = {english},
  keywords = {Graph Grammar,Graph Structure,Graph Transformation,Injective Morphism,Partial Match}
}

@article{fong2015decorated,
  title = {Decorated {{Cospans}}},
  author = {Fong, Brendan},
  date = {2015-08-11},
  journaltitle = {Theory and Applications of Categories},
  volume = {30},
  number = {33},
  eprint = {1502.00872},
  eprinttype = {arxiv},
  pages = {1096--1120},
  abstract = {Let \$\textbackslash mathcal C\$ be a category with finite colimits, writing its coproduct \$+\$, and let \$(\textbackslash mathcal D, \textbackslash otimes)\$ be a braided monoidal category. We describe a method of producing a symmetric monoidal category from a lax braided monoidal functor \$F: (\textbackslash mathcal C,+) \textbackslash to (\textbackslash mathcal D, \textbackslash otimes)\$, and of producing a strong monoidal functor between such categories from a monoidal natural transformation between such functors. The objects of these categories, our so-called `decorated cospan categories', are simply the objects of \$\textbackslash mathcal C\$, while the morphisms are pairs comprising a cospan \$X \textbackslash rightarrow N \textbackslash leftarrow Y\$ in \$\textbackslash mathcal C\$ together with an element \$1 \textbackslash to FN\$ in \$\textbackslash mathcal D\$. Moreover, decorated cospan categories are multigraph categories---each object is equipped with a special commutative Frobenius monoid---and their functors preserve this structure.},
  archiveprefix = {arXiv},
  keywords = {18C10; 18D10,Mathematics - Category Theory}
}

@inproceedings{fong2016categorical,
  title = {A Categorical Approach to Open and Interconnected Dynamical Systems},
  booktitle = {Proceedings of the 31st {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Fong, Brendan and Sobociński, Paweł and Rapisarda, Paolo},
  date = {2016-07-05},
  series = {{{LICS}} '16},
  pages = {495--504},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2933575.2934556},
  abstract = {In his 1986 Automatica paper Willems introduced the influential behavioural approach to control theory with an investigation of linear time-invariant (LTI) discrete dynamical systems. The behavioural approach places open systems at its centre, modelling by tearing, zooming, and linking. We show that these ideas are naturally expressed in the language of symmetric monoidal categories. Our main result gives an intuitive sound and fully complete string diagram algebra for reasoning about LTI systems. These string diagrams are closely related to the classical notion of signal flow graphs, endowed with semantics as multi-input multi-output transducers that process discrete streams with an infinite past as well as an infinite future. At the categorical level, the algebraic characterisation is that of the prop of corelations. Using this framework, we derive a novel structural characterisation of controllability, and consequently provide a methodology for analysing controllability of networked and interconnected systems. We argue that this has the potential of providing elegant, simple, and efficient solutions to problems arising in the analysis of systems over networks, a vibrant research area at the crossing of control theory and computer science.},
  isbn = {978-1-4503-4391-6}
}

@article{fong2019hypergraph,
  title = {Hypergraph Categories},
  author = {Fong, Brendan and Spivak, David I.},
  date = {2019-11-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {223},
  number = {11},
  pages = {4746--4777},
  issn = {0022-4049},
  doi = {10.1016/j.jpaa.2019.02.014},
  abstract = {Hypergraph categories have been rediscovered at least five times, under various names, including well-supported compact closed categories, dgs-monoidal categories, and dungeon categories. Perhaps the reason they keep being reinvented is two-fold: there are many applications—including to automata, databases, circuits, linear relations, graph rewriting, and belief propagation—and yet the standard definition is so involved and ornate as to be difficult to find in the literature. Indeed, a hypergraph category is, roughly speaking, a “symmetric monoidal category in which each object is equipped with the structure of a special commutative Frobenius monoid, satisfying certain coherence conditions”. Fortunately, this description can be simplified a great deal: a hypergraph category is simply a “cospan-algebra,” roughly a lax monoidal functor from cospans to sets. The goal of this paper is to remove the scare-quotes and make the previous statement precise. We prove two main theorems. First is a coherence theorem for hypergraph categories, which says that every hypergraph category is equivalent to an objectwise-free hypergraph category. Second, we prove that the category of objectwise-free hypergraph categories is equivalent to the category of cospan-algebras.},
  langid = {english},
  keywords = {Compact closed categories,Cospan,Frobenius algebras,Hypergraph categories,Wiring diagram}
}

@unpublished{frank2022coalgebraic,
  title = {Coalgebraic {{Semantics}} for {{Nominal Automata}}},
  author = {Frank, Florian and Milius, Stefan and Urbat, Henning},
  date = {2022-02-14},
  eprint = {2202.06546},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {This paper provides a coalgebraic approach to the language semantics of regular nominal non-deterministic automata (RNNAs), which were introduced in previous work. These automata feature ordinary as well as name binding transitions. Correspondingly, words accepted by RNNAs are strings formed by ordinary letters and name binding letters. Bar languages are sets of such words modulo \$\textbackslash alpha\$-equivalence, and to every state of an RNNA one associates its accepted bar language. We show that this semantics arises both as an instance of the Kleisli-style coalgebraic trace semantics as well as an instance of the coalgebraic language semantics obtained via generalized determinization. On the way we revisit coalgebraic trace semantics in general and give a new compact proof for the main result in that theory stating that an initial algebra for a functor yields the terminal coalgebra for the Kleisli extension of the functor. Our proof requires fewer assumptions on the functor than all previous ones.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science}
}

@misc{fritz2022free,
  title = {Free Gs-Monoidal Categories and Free {{Markov}} Categories},
  author = {Fritz, Tobias and Liang, Wendong},
  date = {2022-04-17},
  number = {arXiv:2204.02284},
  eprint = {2204.02284},
  eprinttype = {arxiv},
  primaryclass = {cs, math, stat},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2204.02284},
  abstract = {Categorical probability has recently seen significant advances through the formalism of Markov categories, within which several classical theorems have been proven in entirely abstract categorical terms. Closely related to Markov categories are gs-monoidal categories, also known as CD categories. These omit a condition that implements the normalization of probability. Extending work of Corradini and Gadducci, we construct free gs-monoidal and free Markov categories generated by a collection of morphisms of arbitrary arity and coarity. For free gs-monoidal categories, this comes in the form of an explicit combinatorial description of their morphisms as structured cospans of labeled hypergraphs. These can be thought of as a formalization of gs-monoidal string diagrams (\$=\$term graphs) as a combinatorial data structure. We formulate the appropriate \$2\$-categorical universal property based on ideas of Walters and prove that our categories satisfy it. We expect our free categories to be relevant for computer implementations and we also argue that they can be used as statistical causal models generalizing Bayesian networks.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Mathematics - Statistics Theory,Primary: 18M30; Secondary: 18M35; 60A05; 62D20; 68Q42}
}

@article{gange2014fourvalued,
  title = {Four-{{Valued Reasoning}} and {{Cyclic Circuits}}},
  author = {Gange, Graeme and Horsfall, Benjamin and Naish, Lee and Søndergaard, Harald},
  date = {2014-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {33},
  number = {7},
  pages = {1003--1016},
  issn = {1937-4151},
  doi = {10.1109/TCAD.2014.2304176},
  abstract = {Allowing cycles in a logic circuit can be advantageous, for example, by reducing the number of gates required to implement a given Boolean function, or a set of functions. However, a cyclic circuit may easily be ill behaved. For instance, it may have some output wire oscillation instead of reaching a steady state. Propositional three-valued logic has long been used in tests for good behavior of cyclic circuits; a symbolic evaluation method known as ternary analysis provides one criterion for good behavior under certain assumptions about wire and gate delay. We revisit ternary analysis and argue for the use of four truth values. The fourth truth value allows for the distinction of undefined and underspecified behavior. Ability to under specify behavior is useful, because, in a quest for smaller circuits, an implementor can capitalize on degrees of freedom offered in the specification. Moreover, a fourth truth value is attractive because, rather than complicating (ternary) circuit analysis, it introduces a pleasant symmetry, in the form of contra-duality, as well as providing a convenient framework for manipulating specifications. We use this symmetry to provide fixed point results that clarify how two-, three-, and four-valued analyses are related, and to explain some observations about ternary analysis.},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Boolean functions,circuit optimization,Cognition,combinational circuits,Delays,Integrated circuit modeling,Lattices,Logic gates,multivalued logic,Upper bound,Wires}
}

@article{gange2014fourvalueda,
  title = {Four-{{Valued Reasoning}} and {{Cyclic Circuits}}},
  author = {Gange, Graeme and Horsfall, Benjamin and Naish, Lee and Søndergaard, Harald},
  date = {2014-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {33},
  number = {7},
  pages = {1003--1016},
  issn = {1937-4151},
  doi = {10.1109/TCAD.2014.2304176},
  abstract = {Allowing cycles in a logic circuit can be advantageous, for example, by reducing the number of gates required to implement a given Boolean function, or a set of functions. However, a cyclic circuit may easily be ill behaved. For instance, it may have some output wire oscillation instead of reaching a steady state. Propositional three-valued logic has long been used in tests for good behavior of cyclic circuits; a symbolic evaluation method known as ternary analysis provides one criterion for good behavior under certain assumptions about wire and gate delay. We revisit ternary analysis and argue for the use of four truth values. The fourth truth value allows for the distinction of undefined and underspecified behavior. Ability to under specify behavior is useful, because, in a quest for smaller circuits, an implementor can capitalize on degrees of freedom offered in the specification. Moreover, a fourth truth value is attractive because, rather than complicating (ternary) circuit analysis, it introduces a pleasant symmetry, in the form of contra-duality, as well as providing a convenient framework for manipulating specifications. We use this symmetry to provide fixed point results that clarify how two-, three-, and four-valued analyses are related, and to explain some observations about ternary analysis.},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Boolean functions,circuit optimization,Cognition,combinational circuits,Delays,Integrated circuit modeling,Lattices,Logic gates,multivalued logic,Upper bound,Wires}
}

@article{gange2014fourvaluedb,
  title = {Four-{{Valued Reasoning}} and {{Cyclic Circuits}}},
  author = {Gange, Graeme and Horsfall, Benjamin and Naish, Lee and Søndergaard, Harald},
  date = {2014-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {33},
  number = {7},
  pages = {1003--1016},
  issn = {1937-4151},
  doi = {10.1109/TCAD.2014.2304176},
  abstract = {Allowing cycles in a logic circuit can be advantageous, for example, by reducing the number of gates required to implement a given Boolean function, or a set of functions. However, a cyclic circuit may easily be ill behaved. For instance, it may have some output wire oscillation instead of reaching a steady state. Propositional three-valued logic has long been used in tests for good behavior of cyclic circuits; a symbolic evaluation method known as ternary analysis provides one criterion for good behavior under certain assumptions about wire and gate delay. We revisit ternary analysis and argue for the use of four truth values. The fourth truth value allows for the distinction of undefined and underspecified behavior. Ability to under specify behavior is useful, because, in a quest for smaller circuits, an implementor can capitalize on degrees of freedom offered in the specification. Moreover, a fourth truth value is attractive because, rather than complicating (ternary) circuit analysis, it introduces a pleasant symmetry, in the form of contra-duality, as well as providing a convenient framework for manipulating specifications. We use this symmetry to provide fixed point results that clarify how two-, three-, and four-valued analyses are related, and to explain some observations about ternary analysis.},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Boolean functions,circuit optimization,Cognition,combinational circuits,Delays,Integrated circuit modeling,Lattices,Logic gates,multivalued logic,Upper bound,Wires}
}

@article{gange2014fourvaluedc,
  title = {Four-{{Valued Reasoning}} and {{Cyclic Circuits}}},
  author = {Gange, Graeme and Horsfall, Benjamin and Naish, Lee and Søndergaard, Harald},
  date = {2014-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {33},
  number = {7},
  pages = {1003--1016},
  issn = {1937-4151},
  doi = {10.1109/TCAD.2014.2304176},
  abstract = {Allowing cycles in a logic circuit can be advantageous, for example, by reducing the number of gates required to implement a given Boolean function, or a set of functions. However, a cyclic circuit may easily be ill behaved. For instance, it may have some output wire oscillation instead of reaching a steady state. Propositional three-valued logic has long been used in tests for good behavior of cyclic circuits; a symbolic evaluation method known as ternary analysis provides one criterion for good behavior under certain assumptions about wire and gate delay. We revisit ternary analysis and argue for the use of four truth values. The fourth truth value allows for the distinction of undefined and underspecified behavior. Ability to under specify behavior is useful, because, in a quest for smaller circuits, an implementor can capitalize on degrees of freedom offered in the specification. Moreover, a fourth truth value is attractive because, rather than complicating (ternary) circuit analysis, it introduces a pleasant symmetry, in the form of contra-duality, as well as providing a convenient framework for manipulating specifications. We use this symmetry to provide fixed point results that clarify how two-, three-, and four-valued analyses are related, and to explain some observations about ternary analysis.},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Boolean functions,circuit optimization,Cognition,combinational circuits,Delays,Integrated circuit modeling,Lattices,Logic gates,multivalued logic,Upper bound,Wires}
}

@inproceedings{ghica2007geometry,
  title = {Geometry of Synthesis: A Structured Approach to {{VLSI}} Design},
  shorttitle = {Geometry of Synthesis},
  booktitle = {Proceedings of the 34th Annual {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Ghica, Dan R.},
  date = {2007-01-17},
  series = {{{POPL}} '07},
  pages = {363--375},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1190216.1190269},
  abstract = {We propose a new technique for hardware synthesis from higher-order functional languages with imperative features based on Reynolds's Syntactic Control of Interference. The restriction on contraction in the type system is useful for managing the thorny issue of sharing of physical circuits. We use a semantic model inspired by game semantics and the geometry of interaction, and express it directly as a certain class of digital circuits that form a cartesian, monoidal-closed category. A soundness result is given, which is also a correctness result for the compilation technique.},
  isbn = {978-1-59593-575-5},
  keywords = {game semantics,geometry of interaction,syntactic control of interference,synthesis}
}

@article{ghica2010geometry,
  title = {Geometry of {{Synthesis II}}: {{From Games}} to {{Delay-Insensitive Circuits}}},
  shorttitle = {Geometry of {{Synthesis II}}},
  author = {Ghica, Dan R. and Smith, Alex},
  date = {2010-09-06},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  series = {Proceedings of the 26th {{Conference}} on the {{Mathematical Foundations}} of {{Programming Semantics}} ({{MFPS}} 2010)},
  volume = {265},
  pages = {301--324},
  issn = {1571-0661},
  doi = {10.1016/j.entcs.2010.08.018},
  abstract = {This paper extends previous work on the compilation of higher-order imperative languages into digital circuits [Ghica, D.R., Geometry of Synthesis: a structured approach to VLSI design, in: POPL, 2007, pp. 363–375.]. We introduce concurrency, an essential feature in the context of hardware compilation and we re-use an existing game model to simplify correctness proofs. The target designs we compile to are asynchronous event-logic circuits, which naturally match the asynchronous game model of the language.},
  langid = {english},
  keywords = {asynchronous digital circuits,Game semantics}
}

@article{ghica2011geometry,
  title = {Geometry of Synthesis {{III}}: Resource Management through Type Inference},
  shorttitle = {Geometry of Synthesis {{III}}},
  author = {Ghica, Dan R. and Smith, Alex},
  date = {2011-01-26},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {46},
  number = {1},
  pages = {345--356},
  issn = {0362-1340},
  doi = {10.1145/1925844.1926425},
  abstract = {Geometry of Synthesis is a technique for compiling higher-level programming languages into digital circuits via their game semantic model. Ghica (2007) first presented the key idea, then Ghica and Smith (2010) gave a provably correct compiler into asynchronous circuits for Syntactic Control of Interference (SCI), an affine-typed version of Reynolds's Idealized Algol. Affine typing has the dual benefits of ruling out race conditions through the type system and having a finite-state game-semantic model for any term, which leads to a natural circuit representation and simpler correctness proofs. In this paper we go beyond SCI to full Idealized Algol, enhanced with shared-memory concurrency and semaphores. Compiling ICA proceeds in three stages. First, an intermediate type system called Syntactic Control of Concurrency (SCC), is used to statically determine "concurrency bounds" on all identifiers in the program. Then, a program transformation called serialization is applied to the program to translate it into an equivalent SCC program in which all concurrency bounds are set to the unit. Finally, the resulting program can be then compiled into asynchronous circuits using a slightly enhanced version of the GoS II compiler, which can handle assignable variables used in non-sequential contexts.},
  keywords = {automatic synthesis,event logic,game semantics,syntactic control of interference}
}

@inproceedings{ghica2011geometrya,
  title = {Geometry of Synthesis Iv: Compiling Affine Recursion into Static Hardware},
  shorttitle = {Geometry of Synthesis Iv},
  booktitle = {Proceedings of the 16th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Ghica, Dan R. and Smith, Alex and Singh, Satnam},
  date = {2011-09-19},
  series = {{{ICFP}} '11},
  pages = {221--233},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2034773.2034805},
  abstract = {Abramsky's Geometry of Interaction interpretation (GoI) is a logical-directed way to reconcile the process and functional views of computation, and can lead to a dataflow-style semantics of programming languages that is both operational (i.e. effective) and denotational (i.e. inductive on the language syntax). The key idea of Ghica's Geometry of Synthesis (GoS) approach is that for certain programming languages (namely Reynolds's affine Syntactic Control of Interference - SCI) the GoI processes-like interpretation of the language can be given a finitary representation, for both internal state and tokens. A physical realisation of this representation becomes a semantics-directed compiler for SCI into hardware. In this paper we examine the issue of compiling affine recursive programs into hardware using the GoS method. We give syntax and compilation techniques for unfolding recursive computation in space or in time and we illustrate it with simple benchmark-style examples. We examine the performance of the benchmarks against conventional CPU-based execution models.},
  isbn = {978-1-4503-0865-6},
  keywords = {affine typing,geometry of synthesis,recursion}
}

@inproceedings{ghica2016categorical,
  title = {Categorical Semantics of Digital Circuits},
  booktitle = {2016 {{Formal Methods}} in {{Computer-Aided Design}} ({{FMCAD}})},
  author = {Ghica, Dan R. and Jung, Achim},
  date = {2016-10},
  pages = {41--48},
  doi = {10.1109/FMCAD.2016.7886659},
  abstract = {This paper proposes a categorical theory of digital circuits based on monoidal categories and graph rewriting. The main goal of this paper is conceptual: to fill a foundational gap in reasoning about digital circuits, which is currently almost exclusively semantic (simulations). The level of abstraction we target is circuits with discrete signal levels, discrete time, and explicit delays, which is appropriate for modelling a range of components such as boolean gates or transistors working in saturation mode. We start with an algebraic signature consisting of the basic electronic components of a given class of circuits and extend it gradually (and in a free way) with further algebraic structure (representing circuit combinations, delays, and feedback), while quotienting it with a notion of equivalence corresponding to input-output observability. Using well-known results about the correspondence between free monoidal categories and graph-like structures we can develop, in a principled way, a graph rewriting system which is shown to be useful in reasoning about such circuits. We illustrate the power of our system by reasoning equationally about a challenging class of circuits: combinational circuits with feedback.},
  eventtitle = {2016 {{Formal Methods}} in {{Computer-Aided Design}} ({{FMCAD}})},
  keywords = {category theory,circuit topology,Cognition,Delays,Digital circuits,feedback circuits,Integrated circuit modeling,Logic gates,monoidal categories,multivalued logic,Semantics,Wires}
}

@inproceedings{ghica2017diagrammatic,
  title = {Diagrammatic {{Semantics}} for {{Digital Circuits}}},
  booktitle = {26th {{EACSL Annual Conference}} on {{Computer Science Logic}} ({{CSL}} 2017)},
  author = {Ghica, Dan R. and Jung, Achim and Lopez, Aliaume},
  editor = {Goranko, Valentin and Dam, Mads},
  date = {2017},
  series = {Leibniz {{International Proceedings}} in {{Informatics}} ({{LIPIcs}})},
  volume = {82},
  pages = {24:1--24:16},
  publisher = {{Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik}},
  location = {{Dagstuhl, Germany}},
  issn = {1868-8969},
  doi = {10.4230/LIPIcs.CSL.2017.24},
  isbn = {978-3-95977-045-3},
  keywords = {digital circuits,monoidal categories,operational semantics,rewriting,string diagrams}
}

@article{ghica2017diagrammatica,
  title = {Diagrammatic {{Semantics}} for {{Digital Circuits}} (Technical Report)},
  author = {Ghica, Dan R. and Jung, Achim and Lopez, Aliaume},
  date = {2017-03-29},
  journaltitle = {CoRR},
  volume = {abs/1703.10247},
  eprint = {1703.10247},
  eprinttype = {arxiv},
  abstract = {We introduce a general diagrammatic theory of digital circuits, based on connections between monoidal categories and graph rewriting. The main achievement of the paper is conceptual, filling a foundational gap in reasoning syntactically and symbolically about a large class of digital circuits (discrete values, discrete delays, feedback). This complements the dominant approach to circuit modelling, which relies on simulation. The main advantage of our symbolic approach is the enabling of automated reasoning about abstract circuits, with a potentially interesting new application to partial evaluation of digital circuits. Relative to the recent interest and activity in categorical and diagrammatic methods, our work makes several new contributions. The most important is establishing that categories of digital circuits are Cartesian and admit, in the presence of feedback expressive iteration axioms. The second is producing a general yet simple graph-rewrite framework for reasoning about such categories in which the rewrite rules are computationally efficient, opening the way for practical applications.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Programming Languages}
}

@article{ghica2018knot,
  title = {A Knot Theory for Eight Year Olds},
  author = {Ghica, Dan R.},
  date = {2018-12-12},
  journaltitle = {Mathematical Teaching},
  volume = {264}
}

@article{ghica2018structural,
  title = {A {{Structural}} and {{Nominal Syntax}} for {{Diagrams}}},
  author = {Ghica, Dan R. and Lopez, Aliaume},
  date = {2018-02-27},
  journaltitle = {Electronic Proceedings in Theoretical Computer Science},
  shortjournal = {Electron. Proc. Theor. Comput. Sci.},
  volume = {266},
  eprint = {1702.01695},
  eprinttype = {arxiv},
  pages = {71--83},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.266.4},
  abstract = {The correspondence between monoidal categories and graphical languages of diagrams has been studied extensively, leading to applications in quantum computing and communication, systems theory, circuit design and more. From the categorical perspective, diagrams can be specified using (name-free) combinators which enjoy elegant equational properties. However, conventional notations for diagrammatic structures, such as hardware description languages (VHDL, Verilog) or graph languages (Dot), use a different style, which is flat, relational, and reliant on extensive use of names (labels). Such languages are not known to enjoy nice syntactic equational properties. However, since they make it relatively easy to specify (and modify) arbitrary diagrammatic structures they are more popular than the combinator style. In this paper we show how the two approaches to diagram syntax can be reconciled and unified in a way that does not change the semantics and the existing equational theory. Additionally, we give sound and complete equational theories for the combined syntax.},
  archiveprefix = {arXiv},
  version = {2},
  keywords = {Computer Science - Programming Languages}
}

@unpublished{ghica2022full,
  title = {Full Abstraction for Digital Circuits},
  author = {Ghica, Dan R. and Kaye, George and Sprunger, David},
  date = {2022-02-03},
  eprint = {2201.10456},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  abstract = {This paper refines the existing axiomatic semantics of digital circuits with delay and feedback, in which circuits are constructed as morphisms in a freely generated cartesian traced (dataflow) category. First, we give a cleaner presentation, making a clearer distinction between syntax and semantics, including a full formalisation of the semantics as stream functions. As part of this effort, we refocus the categorical framework through the lens of string diagrams, which not only makes reading equations more intuitive but removes bureaucracy such as associativity from proofs. We also extend the existing framework with a new axiom, inspired by the Kleene fixed-point theorem, which allows circuits with non-delay-guarded feedback, typically handled poorly by traditional methodologies, to be replaced with a series of finitely iterated circuits. This eliminates the possibility of infinitely unfolding a circuit; instead, one can always reduce a circuit to some (possibly undefined) value. To fully characterise the stream functions that correspond to digital circuits, we examine how the behaviour of the latter can be modelled using Mealy machines. By establishing that the translation between sequential circuits and Mealy machines preserves their behaviour, one can observe that circuits always implement monotone stream functions with finite stream derivatives.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages,Mathematics - Category Theory}
}

@inproceedings{gill2010introducing,
  title = {Introducing {{Kansas Lava}}},
  booktitle = {Implementation and {{Application}} of {{Functional Languages}}},
  author = {Gill, Andy and Bull, Tristan and Kimmell, Garrin and Perrins, Erik and Komp, Ed and Werling, Brett},
  editor = {Morazán, Marco T. and Scholz, Sven-Bodo},
  date = {2010},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {18--35},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-16478-1_2},
  abstract = {Kansas Lava is a domain specific language for hardware description. Though there have been a number of previous implementations of Lava, we have found the design space rich, with unexplored choices. We use a direct (Chalmers style) specification of circuits, and make significant use of Haskell overloading of standard classes, leading to concise circuit descriptions. Kansas Lava supports both simulation (inside GHCi), and execution via VHDL, by having a dual shallow and deep embedding inside our Signal type. We also have a lightweight sized-type mechanism, allowing for MATLAB style matrix based specifications to be directly expressed in Kansas Lava.},
  isbn = {978-3-642-16478-1},
  langid = {english},
  keywords = {Applicative Functor,Clock Cycle,Forward Error Correction,Memory Operation,Sequential Circuit}
}

@inproceedings{goossens1995reasoning,
  title = {Reasoning about {{VHDL}} Using Operational and Observational Semantics},
  booktitle = {Correct {{Hardware Design}} and {{Verification Methods}}},
  author = {Goossens, K. G. W.},
  editor = {Camurati, Paolo E. and Eveking, Hans},
  date = {1995},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {311--327},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-60385-9_19},
  abstract = {We define a Plotkin-style structural operational semantics for a subset of vhdl that includes delta time, zero-delay scheduling and waits, arbitrary wait statements, and (commutative) resolution functions. While most of these features have been dealt with in separation, their combination is intricate. We follow closely the “careful prose” definition of vhdl as given in [9].We prove a (conditional) monogenicity result for the operational semantics showing that the parallelism present in vhdl is benign. A classification of program behaviours is also given.While the semantics is of interest, of greater importance is the interpretation of the mature process algebra theory to our particular setting. An adaptation of bisimulation may be constructed but the concept of an observer, a process which inspects or acts as a test harness, turns out to be more useful. It leads naturally to a notion of observational equality that is a congruence with respect to parallel composition. This important result enables substitution of behaviourally equivalent subprograms without affecting the overall program behaviour. The capability to pass (incapability to fail) a test gives rise to a the may (must) preorder on processes. These preorders are shown to coincide.},
  isbn = {978-3-540-45516-5},
  langid = {english},
  keywords = {Denotational Semantic,Operational Semantic,Parallel Composition,Process Algebra,Sequential Program}
}

@inproceedings{hasegawa1997recursion,
  title = {Recursion from Cyclic Sharing: {{Traced}} Monoidal Categories and Models of Cyclic Lambda Calculi},
  shorttitle = {Recursion from Cyclic Sharing},
  booktitle = {Typed {{Lambda Calculi}} and {{Applications}}},
  author = {Hasegawa, Masahito},
  editor = {de Groote, Philippe and Roger Hindley, J.},
  options = {useprefix=true},
  date = {1997},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {196--213},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-62688-3_37},
  abstract = {Cyclic sharing (cyclic graph rewriting) has been used as a practical technique for implementing recursive computation efficiently. To capture its semantic nature, we introduce categorical models for lambda calculi with cyclic sharing (cyclic lambda graphs), using notions of computation by Moggi/Power and Robinson and traced monoidal categories by Joyal, Street and Verity. The former is used for representing the notion of sharing, whereas the latter for cyclic data structures. Our new models provide a semantic framework for understanding recursion created from cyclic sharing, which includes traditional models for recursion created from fixed points as special cases. Our cyclic lambda calculus serves as a uniform language for this wider range of models of recursive computation.},
  isbn = {978-3-540-68438-1},
  langid = {english},
  keywords = {Lambda Calculus,Monoidal Category,Operational Semantic,Recursive Computation,Trace Operator}
}

@inproceedings{hasegawa1997recursiona,
  title = {Recursion from Cyclic Sharing: {{Traced}} Monoidal Categories and Models of Cyclic Lambda Calculi},
  shorttitle = {Recursion from Cyclic Sharing},
  booktitle = {Typed {{Lambda Calculi}} and {{Applications}}},
  author = {Hasegawa, Masahito},
  editor = {de Groote, Philippe and Roger Hindley, J.},
  options = {useprefix=true},
  date = {1997},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {196--213},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-62688-3_37},
  abstract = {Cyclic sharing (cyclic graph rewriting) has been used as a practical technique for implementing recursive computation efficiently. To capture its semantic nature, we introduce categorical models for lambda calculi with cyclic sharing (cyclic lambda graphs), using notions of computation by Moggi/Power and Robinson and traced monoidal categories by Joyal, Street and Verity. The former is used for representing the notion of sharing, whereas the latter for cyclic data structures. Our new models provide a semantic framework for understanding recursion created from cyclic sharing, which includes traditional models for recursion created from fixed points as special cases. Our cyclic lambda calculus serves as a uniform language for this wider range of models of recursive computation.},
  isbn = {978-3-540-68438-1},
  langid = {english},
  keywords = {Lambda Calculus,Monoidal Category,Operational Semantic,Recursive Computation,Trace Operator}
}

@incollection{hasegawa2008finite,
  title = {Finite {{Dimensional Vector Spaces Are Complete}} for {{Traced Symmetric Monoidal Categories}}},
  booktitle = {Pillars of {{Computer Science}}: {{Essays Dedicated}} to {{Boris}} ({{Boaz}}) {{Trakhtenbrot}} on the {{Occasion}} of {{His}} 85th {{Birthday}}},
  author = {Hasegawa, Masahito and Hofmann, Martin and Plotkin, Gordon},
  editor = {Avron, Arnon and Dershowitz, Nachum and Rabinovich, Alexander},
  date = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {367--385},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-78127-1_20},
  abstract = {We show that the category FinVect k of finite dimensional vector spaces and linear maps over any field k is (collectively) complete for the traced symmetric monoidal category freely generated from a signature, provided that the field has characteristic 0; this means that for any two different arrows in the free traced category there always exists a strong traced functor into FinVect k which distinguishes them. Therefore two arrows in the free traced category are the same if and only if they agree for all interpretations in FinVect k .},
  isbn = {978-3-540-78127-1},
  langid = {english},
  keywords = {Closed Network,Function Symbol,Monoidal Category,Monoidal Structure,Parallel Composition}
}

@article{hasegawa2009traced,
  title = {On Traced Monoidal Closed Categories},
  author = {Hasegawa, Masahito},
  date = {2009-04},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {19},
  number = {2},
  pages = {217--244},
  publisher = {{Cambridge University Press}},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129508007184},
  abstract = {The structure theorem of Joyal, Street and Verity says that every traced monoidal category  arises as a monoidal full subcategory of the tortile monoidal category Int. In this paper we focus on a simple observation that a traced monoidal category  is closed if and only if the canonical inclusion from  into Int has a right adjoint. Thus, every traced monoidal closed category arises as a monoidal co-reflexive full subcategory of a tortile monoidal category. From this, we derive a series of facts for traced models of linear logic, and some for models of fixed-point computation. To make the paper more self-contained, we also include various background results for traced monoidal categories.},
  langid = {english}
}

@article{heumuller2011construction,
  title = {Construction of {{Pushout Complements}} in the {{Category}} of {{Hypergraphs}}},
  author = {Heumüller, Marvin and Joshi, Salil and König, Barbara and Stückrath, Jan},
  date = {2011-09-20},
  journaltitle = {Electronic Communications of the EASST},
  volume = {39},
  number = {0},
  issn = {1863-2122},
  doi = {10.14279/tuj.eceasst.39.647},
  abstract = {We describe a concrete construction of all pushout complements for two given morphisms f : A -{$>$} B, m: B -{$>$} D in the category of hypergraphs, valid also for the case where f, m are non-injective. It is based on the generation of suitable equivalence relations. We also give a combinatorial interpretation and show how well-known coefficients from combinatorics, such as the Bell numbers, can be recovered. Furthermore we present a formula that can be used to compute the number of pushout complements for two given morphisms.},
  issue = {0},
  langid = {english}
}

@article{houston2008finite,
  title = {Finite Products Are Biproducts in a Compact Closed Category},
  author = {Houston, Robin},
  date = {2008-02-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {212},
  number = {2},
  pages = {394--400},
  issn = {0022-4049},
  doi = {10.1016/j.jpaa.2007.05.021},
  abstract = {If a compact closed category has finite products or finite coproducts then it in fact has finite biproducts, and so is semi-additive.},
  langid = {english}
}

@article{huntington1904sets,
  title = {Sets of {{Independent Postulates}} for the {{Algebra}} of {{Logic}}},
  author = {Huntington, Edward V.},
  date = {1904},
  journaltitle = {Transactions of the American Mathematical Society},
  volume = {5},
  number = {3},
  eprint = {1986459},
  eprinttype = {jstor},
  pages = {288--309},
  publisher = {{American Mathematical Society}},
  issn = {0002-9947},
  doi = {10.2307/1986459}
}

@article{joyal1991geometry,
  title = {The Geometry of Tensor Calculus, {{I}}},
  author = {Joyal, André and Street, Ross},
  date = {1991},
  journaltitle = {Advances in Mathematics},
  volume = {88},
  number = {1},
  pages = {55--112},
  issn = {0001-8708},
  doi = {10.1016/0001-8708(91)90003-P}
}

@article{joyal1996traced,
  title = {Traced Monoidal Categories},
  author = {Joyal, André and Street, Ross and Verity, Dominic},
  date = {1996-04},
  journaltitle = {Mathematical Proceedings of the Cambridge Philosophical Society},
  volume = {119},
  number = {3},
  pages = {447--468},
  publisher = {{Cambridge University Press}},
  issn = {1469-8064, 0305-0041},
  doi = {10.1017/S0305004100074338},
  abstract = {Traced monoidal categories are introduced, a structure theorem is proved for them, and an example is provided where the structure theorem has application.},
  langid = {english}
}

@article{katis2002feedback,
  title = {Feedback, Trace and Fixed-Point Semantics},
  author = {Katis, P. and Sabadini, Nicoletta and Walters, Robert F. C.},
  date = {2002-04},
  journaltitle = {RAIRO - Theoretical Informatics and Applications},
  volume = {36},
  number = {2},
  pages = {181--194},
  publisher = {{EDP Sciences}},
  issn = {0988-3754, 1290-385X},
  doi = {10.1051/ita:2002009},
  abstract = {We introduce a notion of category with feedback-with-delay, closely related to the notion of traced monoidal category, and show that the Circ construction of [15] is the free category with feedback on a symmetric monoidal category. Combining with the Int construction of Joyal et~al. [12] we obtain a description of the free compact closed category on a symmetric monoidal category. We thus obtain a categorical analogue of the classical localization of a ring with respect to a multiplicative subset. In this context we define a notion of fixed-point semantics of a category with feedback which is seen to include a variety of classical semantics in computer science.},
  langid = {english}
}

@unpublished{kaye2021rewriting,
  title = {Rewriting {{Graphically}} with {{Symmetric Traced Monoidal Categories}}},
  author = {Kaye, George},
  date = {2021-03-18},
  eprint = {2010.06319},
  eprinttype = {arxiv},
  abstract = {We examine a variant of hypergraphs that we call interfaced linear hypergraphs, with the aim of creating a sound and complete graphical language for symmetric traced monoidal categories (STMCs) suitable for graph rewriting. In particular, we are interested in rewriting for categorical settings with a Cartesian structure, such as digital circuits. These are incompatible with previous languages where the trace is constructed using a compact closed or Frobenius structure, as combining these with Cartesian product can lead to degenerate diagrams. Instead we must consider an approach where the trace is constructed as an atomic operation. Interfaced linear hypergraphs are defined as regular hypergraphs in which each vertex is the source and target of exactly one edge each, equipped with an additional interface edge. The morphisms of a freely generated STMC are interpreted as interfaced linear hypergraphs, up to isomorphism (soundness). Moreover, any linear hypergraph is the representation of a unique STMC morphism, up to the equational theory of the category (completeness). This establishes interfaced linear hypergraphs as a suitable combinatorial language for STMCs. We then show how we can apply the theory of adhesive categories to our graphical language, meaning that a broad range of equational properties of STMCs can be specified as a graph rewriting system. The graphical language of digital circuits is presented as a case study.},
  archiveprefix = {arXiv},
  keywords = {Mathematics - Category Theory}
}

@article{kelly1980coherence,
  title = {Coherence for Compact Closed Categories},
  author = {Kelly, G. M. and Laplaza, M. L.},
  date = {1980-12-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {19},
  pages = {193--213},
  issn = {0022-4049},
  doi = {10.1016/0022-4049(80)90101-2},
  langid = {english}
}

@thesis{kissinger2012pictures,
  title = {Pictures of {{Processes}}: {{Automated Graph Rewriting}} for {{Monoidal Categories}} and {{Applications}} to {{Quantum Computing}}},
  shorttitle = {Pictures of {{Processes}}},
  author = {Kissinger, Aleks},
  date = {2012-03-22},
  eprint = {1203.0202},
  eprinttype = {arxiv},
  institution = {{University of Oxford}},
  abstract = {This work is about diagrammatic languages, how they can be represented, and what they in turn can be used to represent. More specifically, it focuses on representations and applications of string diagrams. String diagrams are used to represent a collection of processes, depicted as "boxes" with multiple (typed) inputs and outputs, depicted as "wires". If we allow plugging input and output wires together, we can intuitively represent complex compositions of processes, formalised as morphisms in a monoidal category. [...] The first major contribution of this dissertation is the introduction of a discretised version of a string diagram called a string graph. String graphs form a partial adhesive category, so they can be manipulated using double-pushout graph rewriting. Furthermore, we show how string graphs modulo a rewrite system can be used to construct free symmetric traced and compact closed categories on a monoidal signature. The second contribution is in the application of graphical languages to quantum information theory. We use a mixture of diagrammatic and algebraic techniques to prove a new classification result for strongly complementary observables. [...] We also introduce a graphical language for multipartite entanglement and illustrate a simple graphical axiom that distinguishes the two maximally-entangled tripartite qubit states: GHZ and W. [...] The third contribution is a description of two software tools developed in part by the author to implement much of the theoretical content described here. The first tool is Quantomatic, a desktop application for building string graphs and graphical theories, as well as performing automated graph rewriting visually. The second is QuantoCoSy, which performs fully automated, model-driven theory creation using a procedure called conjecture synthesis.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Artificial Intelligence,Mathematics - Category Theory,Quantum Physics}
}

@incollection{kissinger2014abstract,
  title = {Abstract {{Tensor Systems}} as {{Monoidal Categories}}},
  booktitle = {Categories and {{Types}} in {{Logic}}, {{Language}}, and {{Physics}}: {{Essays Dedicated}} to {{Jim Lambek}} on the {{Occasion}} of {{His}} 90th {{Birthday}}},
  author = {Kissinger, Aleks},
  editor = {Casadio, Claudia and Coecke, Bob and Moortgat, Michael and Scott, Philip},
  date = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {235--252},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-54789-8_13},
  abstract = {The primary contribution of this paper is to give a formal, categorical treatment to Penrose’s abstract tensor notation, in the context of traced symmetric monoidal categories. To do so, we introduce a typed, sum-free version of an abstract tensor system and demonstrate the construction of its associated category. We then show that the associated category of the free abstract tensor system is in fact the free traced symmetric monoidal category on a monoidal signature. A notable consequence of this result is a simple proof for the soundness and completeness of the diagrammatic language for traced symmetric monoidal categories.},
  isbn = {978-3-642-54789-8},
  langid = {english},
  keywords = {Canonical Label,Lower Label,Monoidal Category,Monoidal Functor,Symmetric Monoidal Category}
}

@unpublished{kissinger2015finite,
  title = {Finite Matrices Are Complete for (Dagger-)Hypergraph Categories},
  author = {Kissinger, Aleks},
  date = {2015-08-19},
  eprint = {1406.5942},
  eprinttype = {arxiv},
  abstract = {Hypergraph categories are symmetric monoidal categories where each object is equipped with a special commutative Frobenius algebra (SCFA). Dagger-hypergraph categories are the same, but with dagger-symmetric monoidal categories and dagger-SCFAs. In this paper, we show that finite matrices over a field K of characteristic 0 are complete for hypergraph categories, and that finite matrices where K has a non-trivial involution are complete for dagger-hypergraph categories.},
  archiveprefix = {arXiv},
  keywords = {Mathematics - Category Theory}
}

@inproceedings{kissinger2015quantomatic,
  title = {Quantomatic: {{A Proof Assistant}} for {{Diagrammatic Reasoning}}},
  shorttitle = {Quantomatic},
  booktitle = {Automated {{Deduction}} - {{CADE-25}}},
  author = {Kissinger, Aleks and Zamdzhiev, Vladimir},
  editor = {Felty, Amy P. and Middeldorp, Aart},
  date = {2015},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {326--336},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-21401-6_22},
  abstract = {Monoidal algebraic structures consist of operations that can have multiple outputs as well as multiple inputs, which have applications in many areas including categorical algebra, programming language semantics, representation theory, algebraic quantum information, and quantum groups. String diagrams provide a convenient graphical syntax for reasoning formally about such structures, while avoiding many of the technical challenges of a term-based approach. Quantomatic is a tool that supports the (semi-)automatic construction of equational proofs using string diagrams. We briefly outline the theoretical basis of Quantomatic’s rewriting engine, then give an overview of the core features and architecture and give a simple example project that computes normal forms for commutative bialgebras.},
  isbn = {978-3-319-21401-6},
  langid = {english}
}

@book{kohavi2009switching,
  title = {Switching and {{Finite Automata Theory}}},
  author = {Kohavi, Zvi and Jha, Niraj K.},
  date = {2009-10-22},
  eprint = {Qv0LBAAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{Cambridge University Press}},
  abstract = {Understand the structure, behaviour, and limitations of logic machines with this thoroughly updated third edition. Many new topics are included, such as CMOS gates, logic synthesis, logic design for emerging nanotechnologies, digital system testing, and asynchronous circuit design, to bring students up-to-speed with modern developments. The intuitive examples and minimal formalism of the previous edition are retained, giving students a text that is logical and easy to follow, yet rigorous. Kohavi and Jha begin with the basics, and then cover combinational logic design and testing, before moving on to more advanced topics in finite-state machine design and testing. Theory is made easier to understand with 200 illustrative examples, and students can test their understanding with over 350 end-of-chapter review questions.},
  isbn = {978-1-139-48308-7},
  langid = {english},
  pagetotal = {630},
  keywords = {Computers / Computer Engineering,Technology & Engineering / Electrical,Technology & Engineering / Electronics / Circuits / General,Technology & Engineering / Electronics / General,Technology & Engineering / Engineering (General)}
}

@thesis{kooijman2009haskell,
  title = {Haskell as a Higher Order Structural Hardware Description Language},
  author = {Kooijman, Matthijs},
  date = {2009-12-09},
  institution = {{University of Twente}}
}

@article{kurshan1991analysis,
  title = {Analysis of Digital Circuits through Symbolic Reduction},
  author = {Kurshan, R.P. and McMillan, K.L.},
  date = {1991-11},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {10},
  number = {11},
  pages = {1356--1371},
  issn = {1937-4151},
  doi = {10.1109/43.97615},
  abstract = {The authors describe a semi-algorithmic method to extract finite-state models from an analog circuit-level model by means of homomorphic (behavior preserving) transformations. Properties to be verified are defined by omega -automata. Efficient algorithms for testing language containment of automata can then be applied to verify properties of the finite-state models. Proof of the property in the finite-state model guarantees the property in the analog circuit-level model over a continuous range of input waveforms and circuit parameters. While in practice this method applies directly only to smaller circuit components, it can be used to analyze larger circuits as well by deriving a hierarchy of increasingly abstract models, through repeated applications of homomorphic transformations. Examples of extraction, homomorphism, and verification are described.{$<>$}},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Automata,Automatic testing,Circuit analysis,Circuit simulation,Circuit testing,Digital circuits,Helium,Predictive models,Switches,Switching circuits}
}

@inproceedings{lack2004adhesive,
  title = {Adhesive {{Categories}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Lack, Stephen and Sobociński, Paweł},
  editor = {Walukiewicz, Igor},
  date = {2004},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {273--288},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-24727-2_20},
  abstract = {We introduce adhesive categories, which are categories with structure ensuring that pushouts along monomorphisms are well-behaved. Many types of graphical structures used in computer science are shown to be examples of adhesive categories. Double-pushout graph rewriting generalises well to rewriting on arbitrary adhesive categories.},
  isbn = {978-3-540-24727-2},
  langid = {english},
  keywords = {Dependency Relation,Front Face,Graph Grammar,Graph Transformation,Initial Object}
}

@article{lack2004composing,
  title = {Composing {{PROPs}}},
  author = {Lack, Stephen},
  date = {2004},
  journaltitle = {Theory and Applications of Categories},
  volume = {13},
  number = {9},
  pages = {147--163},
  issn = {1201-561X},
  abstract = {A PROP is a way of encoding structure borne by an object of a symmetric monoidal category. We describe a notion of distributive law for PROPs, based on Beck's distributive laws for monads. A distributive law between PROPs allows them to be composed, and an algebra for the composite PROP consists of a single object with an algebra structure for each of the original PROPs, subject to compatibility conditions encoded by the distributive law. An example is the PROP for bialgebras, which is a composite of the PROP for coalgebras and that for algebras.},
  keywords = {Algebra,Bialgebra,Distributive law,Monad,PROP,Symmetric monoidal category}
}

@article{lack2005adhesive,
  title = {Adhesive and Quasiadhesive Categories},
  author = {Lack, Stephen and Sobociński, Paweł},
  date = {2005-07},
  journaltitle = {RAIRO - Theoretical Informatics and Applications},
  volume = {39},
  number = {3},
  pages = {511--545},
  publisher = {{EDP Sciences}},
  issn = {0988-3754, 1290-385X},
  doi = {10.1051/ita:2005028},
  abstract = {We introduce adhesive categories, which are categories with structure ensuring that pushouts along monomorphisms are well-behaved, as well as quasiadhesive categories which restrict attention to regular monomorphisms. Many examples of graphical structures used in computer science are shown to be examples of adhesive and quasiadhesive categories. Double-pushout graph rewriting generalizes well to rewriting on arbitrary adhesive and quasiadhesive categories.},
  langid = {english},
  keywords = {Adhesive categories,category theory,extensive categories,graph rewriting,quasiadhesive categories}
}

@article{lafont2003algebraic,
  title = {Towards an Algebraic Theory of {{Boolean}} Circuits},
  author = {Lafont, Yves},
  date = {2003-11-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {184},
  number = {2},
  pages = {257--310},
  issn = {0022-4049},
  doi = {10.1016/S0022-4049(03)00069-0},
  abstract = {Boolean circuits are used to represent programs on finite data. Reversible Boolean circuits and quantum Boolean circuits have been introduced to modelize some physical aspects of computation. Those notions are essential in complexity theory, but we claim that a deep mathematical theory is needed to make progress in this area. For that purpose, the recent developments of knot theory is a major source of inspiration. Following the ideas of Burroni, we consider logical gates as generators for some algebraic structure with two compositions, and we are interested in the relations satisfied by those generators. For that purpose, we introduce canonical forms and rewriting systems. Up to now, we have mainly studied the basic case and the linear case, but we hope that our methods can be used to get presentations by generators and relations for the (reversible) classical case and for the (unitary) quantum case.},
  langid = {english}
}

@article{leiserson1991retiming,
  title = {Retiming Synchronous Circuitry},
  author = {Leiserson, Charles E. and Saxe, James B.},
  date = {1991-06-01},
  journaltitle = {Algorithmica},
  shortjournal = {Algorithmica},
  volume = {6},
  number = {1},
  pages = {5--35},
  issn = {1432-0541},
  doi = {10.1007/BF01759032},
  abstract = {This paper describes a circuit transformation calledretiming in which registers are added at some points in a circuit and removed from others in such a way that the functional behavior of the circuit as a whole is preserved. We show that retiming can be used to transform a given synchronous circuit into a more efficient circuit under a variety of different cost criteria. We model a circuit as a graph in which the vertex setV is a collection of combinational logic elements and the edge setE is the set of interconnections, each of which may pass through zero or more registers. We give anO(¦V∥E¦lg¦V¦) algorithm for determining an equivalent retimed circuit with the smallest possible clock period. We show that the problem of determining an equivalent retimed circuit with minimum state (total number of registers) is polynomial-time solvable. This result yields a polynomial-time optimal solution to the problem of pipelining combinational circuitry with minimum register cost. We also give a chacterization of optimal retiming based on an efficiently solvable mixed-integer linear-programming problem.},
  langid = {english}
}

@article{luk1993pipelining,
  title = {Pipelining and Transposing Heterogeneous Array Designs},
  author = {Luk, Wayne},
  date = {1993-01-01},
  journaltitle = {Journal of VLSI signal processing systems for signal, image and video technology},
  shortjournal = {J VLSI Sign Process Syst Sign Image Video Technol},
  volume = {5},
  number = {1},
  pages = {7--20},
  issn = {0922-5773},
  doi = {10.1007/BF01880268},
  abstract = {This paper describes a scheme for representing heterogeneous array circuits, in particular those which have been optimized by pipelining or by transposition. Equations for correctness-preserving transformations of these parametric representations are presented. The method is illustrated on developing novel pipelined designs for parallel division. It is estimated that, for a field-programmable gate array implementation, the speed of an integer divider can be doubled at the expense of a 50 percent increase in area.},
  langid = {english}
}

@article{malik1994analysis,
  title = {Analysis of Cyclic Combinational Circuits},
  author = {Malik, S.},
  date = {1994-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {13},
  number = {7},
  pages = {950--956},
  issn = {1937-4151},
  doi = {10.1109/43.293952},
  abstract = {A logic circuit is said to be combinational if the function it computes depends only on the inputs applied to the circuit, and is sequential if it depends on some past history in addition to the current inputs. Circuits that have an underlying topology that is acyclic are combinational, since feedback is a necessary condition for them to be sequential. However, it is not a sufficient condition since there exist combinational logic circuits that are cyclic. These occur often in bus structures in data paths. Traditional formal techniques in logic synthesis, logic analysis, and timing analysis of combinational circuits have restricted themselves to acyclic combinational circuits, since they have been unable to handle the analysis of circuits with cycles. Thus, in practice, these circuits are handled using clumsy work-arounds, which is obviously undesirable. This paper presents a formal analysis of these circuits and presents techniques for the logical and timing analysis of such circuits. These techniques are practically feasible on reasonably large circuits encountered in practice.{$<>$}},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Adders,Circuit analysis,Circuit synthesis,Circuit topology,Combinational circuits,Feedback circuits,History,Logic circuits,Sufficient conditions,Timing}
}

@inproceedings{mckay1998dynamic,
  title = {Dynamic Specialisation of {{XC6200 FPGAs}} by Partial Evaluation},
  booktitle = {Field-{{Programmable Logic}} and {{Applications From FPGAs}} to {{Computing Paradigm}}},
  author = {McKay, Nicholas and Singh, Satnam},
  editor = {Hartenstein, Reiner W. and Keevallik, Andres},
  date = {1998},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {298--307},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/BFb0055257},
  abstract = {This paper describes preliminary results of dynamically specialising Xilinx XC6200 FPGA circuits using partial evaluation. This method provides a systematic way to manage the complexity of dynamic reconfiguration in the special case where a general circuit is specialised with respect to a slowly changing input. We describe how we address the verification and run-time support issues which are raised when one modifies a circuit at run-time.},
  isbn = {978-3-540-68066-6},
  langid = {english},
  keywords = {Critical Path,Data Encryption Standard,Dynamic Reconfiguration,General Circuit,Partial Evaluation}
}

@article{mealy1955method,
  title = {A Method for Synthesizing Sequential Circuits},
  author = {Mealy, George H.},
  date = {1955-09},
  journaltitle = {The Bell System Technical Journal},
  volume = {34},
  number = {5},
  pages = {1045--1079},
  issn = {0005-8580},
  doi = {10.1002/j.1538-7305.1955.tb03788.x},
  abstract = {The theoretical basis of sequential circuit synthesis is developed, with particular reference to the work of D. A. Huffman and E. F. Moore. A new method of synthesis is developed which emphasizes formal procedures rather than the more familiar intuitive ones. Familiarity is assumed with the use of switching algebra in the synthesis of combinational circuits.},
  eventtitle = {The {{Bell System Technical Journal}}}
}

@article{mendler2012constructive,
  title = {Constructive {{Boolean}} Circuits and the Exactness of Timed Ternary Simulation},
  author = {Mendler, Michael and Shiple, Thomas R. and Berry, Gérard},
  date = {2012},
  journaltitle = {Formal methods in system design : an international journal},
  volume = {40},
  number = {3},
  pages = {283--329},
  publisher = {{Springer}},
  issn = {0925-9856},
  doi = {10.1007/s10703-012-0144-6},
  langid = {english},
  annotation = {Accepted: 2019-09-19T15:38:58Z}
}

@unpublished{mertin2022framework,
  title = {A {{Framework}} for the {{High-Level Specification}} and {{Verification}} of {{Synchronous Digital Logic Systems}}},
  author = {Mertin, Nick and Ean, Richard and Rudie, Karen},
  date = {2022-01-25},
  eprint = {2201.10632},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {A syntactic model is presented for the specification of finite-state synchronous digital logic systems with complex input/output interfaces, which control the flow of data between opaque computational elements, and for the composition of compatible systems to form closed-loop systems with no inputs or outputs. This model improves upon similar existing models with a novel approach to specifying input and output ports in a way which is uniform and symmetric. An automaton model is also presented for encoding arbitrary computational processes, and an algorithm is presented to generate an automaton representation of a closed-loop system. Using the automaton model, the problem of timing-agnostic verification of closed-loop systems against a desired behavioural specification, encoded as the similarity of closed-loop systems in terms of the set of computations performed, is shown to be decidable. The relationship between the models and real-world implementations of systems is discussed.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science}
}

@inproceedings{mifsud1995control,
  title = {Control Structures},
  booktitle = {Proceedings of {{Tenth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Mifsud, A. and Milner, R. and Power, J.},
  date = {1995-06},
  pages = {188--198},
  issn = {1043-6871},
  doi = {10.1109/LICS.1995.523256},
  abstract = {'Action calculi' are a class of action structures with added structure. Each action calculus AC(/spl Kscr/) is determined by a set /spl Kscr/ of controls, equipped with reaction rules; calculi such as Petri nets, the typed /spl lambda/-calculus and the /spl pi/-calculus are obtained by varying /spl Kscr/. This paper defines for each /spl Kscr/ a category CS(/spl Kscr/), characterized by equational axioms, of action structures with added structure; they are called 'control structures' and provide models of the calculus AC(/spl Kscr/), which is initial in the category. The 'surface' of an action is defined; this is an abstract correlate of the syntactic notion of 'free name'. Three equational characterizations of the surface are found to be equivalent. This permits a non-syntactic treatment of the linkage among the components of an interactive system. Finally, control structures and their morphisms offer a means of classifying the variety of dynamic disciplines in models of concurrency, such as the mobility present in the /spl pi/-calculus but absent in other calculi.},
  eventtitle = {Proceedings of {{Tenth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  keywords = {Calculus,Computer science,Concurrent computing,Control system synthesis,Couplings,Equations,Integrated circuit modeling,Laboratories,Petri nets,Surface treatment}
}

@inproceedings{milius2017proper,
  title = {Proper {{Functors}} and Their {{Rational Fixed Point}}},
  booktitle = {7th {{Conference}} on {{Algebra}} and {{Coalgebra}} in {{Computer Science}} ({{CALCO}} 2017)},
  author = {Milius, Stefan},
  editor = {Bonchi, Filippo and König, Barbara},
  date = {2017},
  series = {Leibniz {{International Proceedings}} in {{Informatics}} ({{LIPIcs}})},
  volume = {72},
  pages = {18:1--18:16},
  publisher = {{Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik}},
  location = {{Dagstuhl, Germany}},
  issn = {1868-8969},
  doi = {10.4230/LIPIcs.CALCO.2017.18},
  isbn = {978-3-95977-033-0},
  keywords = {coalgebra,proper functor,proper semiring,rational fixed point}
}

@thesis{moszkowski1983reasoning,
  type = {phdthesis},
  title = {Reasoning {{About Digital Circuits}}},
  author = {Moszkowski, Benjamin C},
  date = {1983},
  institution = {{Stanford University}},
  location = {{United States -- California}},
  abstract = {Predicate logic is a powerful and general descriptive formalism with a long history of development. However, since the logic's underlying semantics have no notion of time, statements such as "I increases by 2" and "The bit signal X rises from 0 to 1" can not be directly expressed. We present a formalism called interval temporal logic (ITL) that augments standard predicate logic with time-dependent operators. ITL is like discrete linear-time temporal logic but includes time intervals. The behavior of programs and hardware devices can often be decomposed into successively smaller intervals of activity. State transitions can be characterized by properties relating the initial and final values of variables over intervals. Furthermore, these time periods provide a convenient framework for introducing quantitative timing details. After giving some motivation for reasoning about hardware, we present the propositional and first-order syntax and semantics of ITL. We demonstrate ITL's utility for uniformly describing the structure and dynamics of a wide variety of timing-dependent digital circuits. Devices discussed include delay elements, adders, latches, flip-flops, counters, random-access memories, a clocked multiplication circuit and the Am2901 bit slice. ITL also provides a means for expressing such concepts as device equivalence and internal states. Propositional ITL is shown to be undecidable although useful subsets are of relatively reasonable computational complexity.},
  langid = {english},
  pagetotal = {148},
  keywords = {Applied sciences}
}

@inproceedings{moszkowski1985executing,
  title = {Executing Temporal Logic Programs},
  booktitle = {Seminar on {{Concurrency}}},
  author = {Moszkowski, Ben},
  editor = {Brookes, Stephen D. and Roscoe, Andrew William and Winskel, Glynn},
  date = {1985},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {111--130},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-15670-4_6},
  abstract = {Over the last few years, temporal logic has been investigated as a tool for reasoning about computer programs, digital circuits and message-passing systems. In the case of programs, the general feeling has been that temporal logic is an adjunct to existing languages. For example, one might use temporal logic to specify and prove properties about a program written in, say, CSP. This leads to the annoyance of having to simultaneously use two separate notations.In earlier work we proposed that temporal logic itself directly serve as the basis for a programming language. Since then we have implemented an interpreter for such a language called Tempura. We are developing Tempura as a tool for directly executing suitable temporal logic specifications of digital circuits and other discrete-time systems. Since every Tempura statement is also a temporal formula, we can use the entire temporal logic formalism for our assertion language and semantics. Tempura has the two seemingly contradictory properties of being a logic programming language and having imperative constructs such as assignment statements.The presentation given here first describes the syntax and semantics of a first-order temporal logic having the operators ⊗ (next) and □ (always). This serves as the basis for the Tempura programming language. The lesser known temporal operator chop is subsequently introduced, resulting in Interval Temporal Logic. We then show how to incorporate chop and related constructs into Tempura.},
  isbn = {978-3-540-39593-5},
  langid = {english},
  keywords = {Arithmetic Expression,Boolean Expression,Digital Circuit,Predicate Symbol,Temporal Logic}
}

@article{naish2014truth,
  title = {Truth versus Information in Logic Programming},
  author = {Naish, Lee and Søndergaard, Harald},
  date = {2014-11},
  journaltitle = {Theory and Practice of Logic Programming},
  volume = {14},
  number = {6},
  pages = {803--840},
  publisher = {{Cambridge University Press}},
  issn = {1471-0684, 1475-3081},
  doi = {10.1017/S1471068413000069},
  abstract = {The semantics of logic programs was originally described in terms of two-valued logic. Soon, however, it was realised that three-valued logic had some natural advantages, as it provides distinct values not only for truth and falsehood but also for “undefined”. The three-valued semantics proposed by Fitting (Fitting, M. 1985. A Kripke–Kleene semantics for logic programs. Journal of Logic Programming 2, 4, 295–312) and Kunen (Kunen, K. 1987. Negation in logic programming. Journal of Logic Programming 4, 4, 289–308) are closely related to what is computed by a logic program, the third truth value being associated with non-termination. A different three-valued semantics, proposed by Naish, shared much with those of Fitting and Kunen but incorporated allowances for programmer intent, the third truth value being associated with underspecification. Naish used an (apparently) novel “arrow” operator to relate the intended meaning of left and right sides of predicate definitions. In this paper we suggest that the additional truth values of Fitting/Kunen and Naish are best viewed as duals. We use Belnap's four-valued logic (Belnap, N. D. 1977. A useful four-valued logic. In Modern Uses of Multiple-Valued Logic, J. M. Dunn and G. Epstein, Eds. D. Reidel, Dordrecht, Netherlands, 8–37), also used elsewhere by Fitting, to unify the two three-valued approaches. The truth values are arranged in a bilattice, which supports the classical ordering on truth values as well as the “information ordering”. We note that the “arrow” operator of Naish (and our four-valued extension) is essentially the information ordering, whereas the classical arrow denotes the truth ordering. This allows us to shed new light on many aspects of logic programming, including program analysis, type and mode systems, declarative debugging and the relationships between specifications and programs, and successive execution states of a program.},
  langid = {english},
  keywords = {declarative debugging,information order,intended interpretation,logic program specification,many-valued logic,modes,program analysis,specification semantics}
}

@article{pandey1999vhdl,
  title = {{{VHDL}} Semantics and Validating Transformations},
  author = {Pandey, S.L. and Umamageswaran, K. and Wilsey, P.A.},
  date = {1999-07},
  journaltitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {18},
  number = {7},
  pages = {936--955},
  issn = {1937-4151},
  doi = {10.1109/43.771177},
  abstract = {Formal models are used to provide an unambiguous definition of the semantics of very high speed integrated circuit hardware description language (VHDL) and to prove equivalences of VHDL programs. This paper presents a formal model of the dynamic semantics of VHDL that characterizes several important features of VHDL such as delta delays, pulse rejection limits, disconnection delays, postponed processes, sequential statements, and resolution functions. The underlying logic is interval temporal logic, which assists in characterizing the timing information contained in a VHDL program. The semantic definition is not dependent on the VHDL simulation cycle since it only defines the net effect of evaluating a VHDL program. It is argued that this declarative style coupled with the inherent advantages of temporal logic makes it possible to validate transformations (or rewrite rules) on VHDL programs and to formally reason about the timing aspects of VHDL. In particular, we present proofs of soundness of rewrite rules such as process folding and signal collapsing, and use temporal logic to derive an algorithm for determining when a given VHDL program is free of transaction preemption.},
  eventtitle = {{{IEEE Transactions}} on {{Computer-Aided Design}} of {{Integrated Circuits}} and {{Systems}}},
  keywords = {Circuit simulation,Circuit synthesis,Computational modeling,Delay,Design automation,Hardware design languages,Logic,Time warp simulation,Timing,Very high speed integrated circuits}
}

@article{piedeleu2021string,
  title = {A {{String Diagrammatic Axiomatisation}} of {{Finite-State Automata}}},
  author = {Piedeleu, Robin and Zanasi, Fabio},
  date = {2021-03-23},
  journaltitle = {Foundations of Software Science and Computation Structures},
  shortjournal = {Foundations of Software Science and Computation Structures},
  volume = {12650},
  eprint = {null},
  eprinttype = {pmid},
  pages = {469--489},
  doi = {10.1007/978-3-030-71995-1_24},
  abstract = {We develop a fully diagrammatic approach to finite-state automata, based on reinterpreting their usual state-transition graphical representation as a two-dimensional syntax of string diagrams. In this setting, we are able to provide a complete equational theory for language equivalence, with two notable features. First, the proposed axiomatisation is finite— a result which is provably impossible for the one-dimensional syntax of regular expressions. Second, the Kleene star is a derived concept, as it can be decomposed into more primitive algebraic blocks.},
  pmcid = {PMC7984119}
}

@unpublished{pirashvili2001prop,
  title = {On the {{PROP}} Corresponding to Bialgebras},
  author = {Pirashvili, Teimuraz},
  date = {2001-10-03},
  eprint = {math/0110014},
  eprinttype = {arxiv},
  abstract = {A PROP is a symmetric monoidal category, whose set of objects is the set of natural numbers and on objects the monoidal structure is given by the addition. An algebra over a PROP is a symmetric strict monoidal functor to the tensor category of vector spaces. We give an explicite construction of the PROP whose category of algebras is equivalent to the category of bialgebras (= associative and coassociative bialgebras).},
  archiveprefix = {arXiv},
  keywords = {18C10,Mathematics - Category Theory,Mathematics - Quantum Algebra}
}

@book{pitts2013nominal,
  title = {Nominal {{Sets}}: {{Names}} and {{Symmetry}} in {{Computer Science}}},
  shorttitle = {Nominal {{Sets}}},
  author = {Pitts, Andrew M.},
  date = {2013-05-30},
  eprint = {Ycz2R9PcGBwC},
  eprinttype = {googlebooks},
  publisher = {{Cambridge University Press}},
  abstract = {Nominal sets provide a promising new mathematical analysis of names in formal languages based upon symmetry, with many applications to the syntax and semantics of programming language constructs that involve binding, or localising names. Part I provides an introduction to the basic theory of nominal sets. In Part II, the author surveys some of the applications that have developed in programming language semantics (both operational and denotational), functional programming and logic programming. As the first book to give a detailed account of the theory of nominal sets, it will be welcomed by researchers and graduate students in theoretical computer science.},
  isbn = {978-1-107-01778-8},
  langid = {english},
  pagetotal = {291},
  keywords = {Computers / Computer Science,Computers / Languages / General}
}

@article{plotkin2004structual,
  title = {A Structual Approach to Operational Semantics},
  author = {Plotkin, Gordon},
  date = {2004},
  journaltitle = {Journal of Logical and Algebraic Programming},
  volume = {60--61},
  pages = {17--139}
}

@article{plotkin2004structural,
  title = {A Structural Approach to Operational Semantics},
  author = {Plotkin, Gordon D.},
  date = {2004},
  journaltitle = {J. Log. Algebr. Program.},
  volume = {60--61},
  pages = {17--139},
  doi = {10.1016/j.jlap.2004.03.002}
}

@incollection{plump2005confluence,
  title = {Confluence of {{Graph Transformation Revisited}}},
  booktitle = {Processes, {{Terms}} and {{Cycles}}: {{Steps}} on the {{Road}} to {{Infinity}}: {{Essays Dedicated}} to {{Jan Willem Klop}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  author = {Plump, Detlef},
  editor = {Middeldorp, Aart and van Oostrom, Vincent and van Raamsdonk, Femke and de Vrijer, Roel},
  options = {useprefix=true},
  date = {2005},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {280--308},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/11601548_16},
  abstract = {It is shown that it is undecidable in general whether a terminating graph rewriting system is confluent or not—in contrast to the situation for term and string rewriting systems. Critical pairs are introduced to hypergraph rewriting, a generalisation of graph rewriting, where it turns out that the mere existence of common reducts for all critical pairs of a graph rewriting system does not imply local confluence. A Critical Pair Lemma for hypergraph rewriting is then established which guarantees local confluence if each critical pair of a system has joining derivations that are compatible in that they map certain nodes to the same nodes in the common reduct.},
  isbn = {978-3-540-32425-6},
  langid = {english},
  keywords = {Critical Pair,Direct Derivation,Graph Grammar,Graph Transformation,Rule Schema}
}

@article{prange2008construction,
  title = {Construction and {{Properties}} of {{Adhesive}} and {{Weak Adhesive High-Level Replacement Categories}}},
  author = {Prange, Ulrike and Ehrig, Hartmut and Lambers, Leen},
  date = {2008-06-01},
  journaltitle = {Applied Categorical Structures},
  shortjournal = {Appl Categor Struct},
  volume = {16},
  number = {3},
  pages = {365--388},
  issn = {1572-9095},
  doi = {10.1007/s10485-007-9106-3},
  abstract = {As presented in Ehrig et~al. (Fundamentals of Algebraic Graph Transformation, EATCS Monographs, Springer, 2006), adhesive high-level replacement (HLR) categories and systems are an adequate framework for several kinds of transformation systems based on the double pushout approach. Since (weak) adhesive HLR categories are closed under product, slice, coslice, comma and functor category constructions, it is possible to build new (weak) adhesive HLR categories from existing ones. But for the general results of transformation systems, as additional properties initial pushouts, binary coproducts compatible with a special morphism class \$\textbackslash cal\{M\}\$and a pair factorization are needed to obtain the full theory. In this paper, we analyze under which conditions these additional properties are preserved by the categorical constructions in order to avoid checking these properties explicitly.},
  langid = {english}
}

@article{pynko1999functional,
  title = {Functional {{Completeness}} and {{Axiomatizability}} within {{Belnap}}'s {{Four-Valued Logic}} and Its {{Expansions}}},
  author = {Pynko, Alexej P.},
  date = {1999-01-01},
  journaltitle = {Journal of Applied Non-Classical Logics},
  volume = {9},
  number = {1},
  pages = {61--105},
  publisher = {{Taylor \& Francis}},
  issn = {1166-3081},
  doi = {10.1080/11663081.1999.10510958},
  abstract = {In this paper we study 12 four-valued logics arisen from Belnap's truth and/or knowledge four-valued lattices, with or without constants, by adding one or both or none of two new non-regular operations—classical negation and natural implication. We prove that the secondary connectives of the bilattice four-valued logic with bilattice constants are exactly the regular four-valued operations. Moreover, we prove that its expansion by any non-regular connective (such as, e.g., classical negation or natural implication) is strictly functionally complete. Further, finding axiomatizations of the quasi varieties generated by the 12 logics involved (that prove to be varieties), we find naturell equational axiomatizations of these logics. Finally, applying Pynko's general theory of algebraizable sequential consequence operations, we also find equivalent natural sequentiell axiomatizations of the logics under consideration that expand either of two Pynko's sequential calculi for the constant-free truth-lattice four-valued logic.},
  keywords = {algebraizable sequential consequence,Belnap's four-valued logic,Boolean algebra,De Morgan lattice,distributive bilattice with negation,equational consequence,equivalent quasivariety,functionally complete logic,implicative De Morgan lattice,polynomial operation,PRIMARY: 03B50; 03G10; 06D30; 06E25; 08A40; 08C15,SECONDARY: 03B22; 03F05; 03G99,sequential consequence},
  annotation = {\_eprint: https://doi.org/10.1080/11663081.1999.10510958}
}

@thesis{riedel2004cyclic,
  type = {phdthesis},
  title = {Cyclic Combinational Circuits},
  author = {Riedel, Marc D.},
  date = {2004-05-27},
  institution = {{California Institute of Technology}},
  location = {{United States -- California}},
  abstract = {A collection of logic gates forms a combinational circuit if the outputs can be described as Boolean functions of the current input values only. Optimizing combinational circuitry, for instance, by reducing the number of gates (the area) or by reducing the length of the signal paths (the delay), is an overriding concern in the design of digital integrated circuits. The accepted wisdom is that combinational circuits must have acyclic (i.e., loop-free or feed-forward) topologies. In fact, the idea that “combinational” and “acyclic” are synonymous terms is so thoroughly ingrained that many textbooks provide the latter as a definition of the former. And yet simple examples suggest that this is incorrect. In this dissertation, we advocate the design of cyclic combinational circuits (i.e., circuits with loops or feedback paths). We demonstrate that circuits can be optimized effectively for area and for delay by introducing cycles. On the theoretical front, we discuss lower bounds and we show that certain cyclic circuits are one-half the size of the best possible equivalent a cyclic implementations. On the practical front, we describe an efficient approach for analyzing cyclic circuits, and we provide a general framework for synthesizing such circuits. On trials with industry-accepted benchmark circuits, we obtained significant improvements in area and delay in nearly all cases. Based on these results, we suggest that it is time to re-write the definition: combinational might well mean cyclic.},
  isbn = {9780496071005},
  langid = {english},
  pagetotal = {112},
  keywords = {Applied sciences,Combinational circuits,Cycles,Feedback,Logic synthesis}
}

@article{rodrigues1998translation,
  title = {A Translation Method for {{Belnap}} Logic},
  author = {Rodrigues, Odinaldo and Russo, Alessandra},
  date = {1998},
  journaltitle = {Imperial College RR DoC98/7}
}

@article{roman2020open,
  title = {Open {{Diagrams}} via {{Coend Calculus}}},
  author = {Román, Mario},
  date = {2020-04-09},
  doi = {10.4204/EPTCS.333.5},
  abstract = {Morphisms in a monoidal category are usually interpreted as processes, and graphically depicted as square boxes. In practice, we are faced with the problem of interpreting what non-square boxes ought to represent in terms of the monoidal category and, more importantly, how should they be composed. Examples of this situation include lenses or learners. We propose a description of these non-square boxes, which we call open diagrams, using the monoidal bicategory of profunctors. A graphical coend calculus can then be used to reason about open diagrams and their compositions.},
  langid = {english}
}

@article{roman2020opena,
  title = {Open {{Diagrams}} via {{Coend Calculus}}},
  author = {Román, Mario},
  date = {2020-04-09},
  doi = {10.4204/EPTCS.333.5},
  abstract = {Morphisms in a monoidal category are usually interpreted as processes, and graphically depicted as square boxes. In practice, we are faced with the problem of interpreting what non-square boxes ought to represent in terms of the monoidal category and, more importantly, how should they be composed. Examples of this situation include lenses or learners. We propose a description of these non-square boxes, which we call open diagrams, using the monoidal bicategory of profunctors. A graphical coend calculus can then be used to reason about open diagrams and their compositions.},
  langid = {english}
}

@article{rutten2000universal,
  title = {Universal Coalgebra: A Theory of Systems},
  shorttitle = {Universal Coalgebra},
  author = {Rutten, J. J. M. M.},
  date = {2000-10-17},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theoretical Computer Science},
  series = {Modern {{Algebra}}},
  volume = {249},
  number = {1},
  pages = {3--80},
  issn = {0304-3975},
  doi = {10.1016/S0304-3975(00)00056-6},
  abstract = {In the semantics of programming, finite data types such as finite lists, have traditionally been modelled by initial algebras. Later final coalgebras were used in order to deal with infinite data types. Coalgebras, which are the dual of algebras, turned out to be suited, moreover, as models for certain types of automata and more generally, for (transition and dynamical) systems. An important property of initial algebras is that they satisfy the familiar principle of induction. Such a principle was missing for coalgebras until the work of Aczel (Non-Well-Founded sets, CSLI Leethre Notes, Vol. 14, center for the study of Languages and information, Stanford, 1988) on a theory of non-wellfounded sets, in which he introduced a proof principle nowadays called coinduction. It was formulated in terms of bisimulation, a notion originally stemming from the world of concurrent programming languages. Using the notion of coalgebra homomorphism, the definition of bisimulation on coalgebras can be shown to be formally dual to that of congruence on algebras. Thus, the three basic notions of universal algebra: algebra, homomorphism of algebras, and congruence, turn out to correspond to coalgebra, homomorphism of coalgebras, and bisimulation, respectively. In this paper, the latter are taken as the basic ingredients of a theory called universal coalgebra. Some standard results from universal algebra are reformulated (using the aforementioned correspondence) and proved for a large class of coalgebras, leading to a series of results on, e.g., the lattices of subcoalgebras and bisimulations, simple coalgebras and coinduction, and a covariety theorem for coalgebras similar to Birkhoff's variety theorem.},
  langid = {english},
  keywords = {Algebra,Bisimulation,Coalgebra,Coinduction,Congruence,Covariety,Dynamical system,Homomorphism,Induction,Transition system,Universal algebra,Universal coalgebra,Variety}
}

@article{rutten2005algebra,
  title = {Algebra, Bitstreams, and Circuits},
  author = {Rutten, J. J. M. M.},
  date = {2005-01-01},
  journaltitle = {Software Engineering [SEN]},
  number = {R 0502},
  abstract = {We define, analyse, and relate in a uniform way four different algebraic structures on the set of bitstreams, motivating each of them in terms of the digital circuits they can describe. For one of these, the 2-adic numbers, we characterise a class of linear digital circuits in terms of rational streams},
  langid = {english}
}

@article{rutten2005coinductive,
  title = {A Coinductive Calculus of Streams},
  author = {Rutten, J. J. M. M.},
  date = {2005-02},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {15},
  number = {1},
  pages = {93--147},
  publisher = {{Cambridge University Press}},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129504004517},
  abstract = {We develop a coinductive calculus of streams based on the presence of a final coalgebra structure on the set of streams (infinite sequences of real numbers). The main ingredient is the notion of stream derivative, which can be used to formulate both coinductive proofs and definitions. In close analogy to classical analysis, the latter are presented as behavioural differential equations. A number of applications of the calculus are presented, including difference equations, analytical differential equations, continued fractions, and some problems from discrete mathematics and combinatorics.},
  langid = {english}
}

@article{rutten2006algebraic,
  title = {Algebraic {{Specification}} and {{Coalgebraic Synthesis}} of {{Mealy Automata}}},
  author = {Rutten, J. J. M. M.},
  date = {2006-08-08},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  series = {Proceedings of the {{International Workshop}} on {{Formal Aspects}} of {{Component Software}} ({{FACS}} 2005)},
  volume = {160},
  pages = {305--319},
  issn = {1571-0661},
  doi = {10.1016/j.entcs.2006.05.030},
  abstract = {We introduce the notion of functional stream derivative, generalising the notion of input derivative of rational expressions (Brzozowski 1964) to the case of stream functions over arbitrary input and output alphabets. We show how to construct Mealy automata from algebraically specified stream functions by the symbolic computation of functional stream derivatives. We illustrate this construction in full detail for various bitstream functions specified in the algebraic calculus of the 2-adic numbers. This work is part of a larger ongoing effort to specify and model component connector circuits in terms of (functions and relations on) streams.},
  langid = {english},
  keywords = {2-adic integer,binary arithmetic,bitstream,functional stream derivative,Mealy automaton,Stream function}
}

@article{rutten2008rational,
  title = {Rational Streams Coalgebraically},
  author = {Rutten, J. J. M. M.},
  date = {2008-09-19},
  journaltitle = {Logical Methods in Computer Science},
  shortjournal = {Log.Meth.Comput.Sci.},
  volume = {4},
  number = {3},
  eprint = {0807.4073},
  eprinttype = {arxiv},
  pages = {9},
  issn = {18605974},
  doi = {10.2168/LMCS-4(3:9)2008},
  abstract = {We study rational streams (over a field) from a coalgebraic perspective. Exploiting the finality of the set of streams, we present an elementary and uniform proof of the equivalence of four notions of representability of rational streams: by finite dimensional linear systems; by finite stream circuits; by finite weighted stream automata; and by finite dimensional subsystems of the set of streams.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,F.1.1,G.1.0}
}

@article{schweimeier1999categorical,
  title = {A {{Categorical}} and {{Graphical Treatment}} of {{Closure Conversion}}},
  author = {Schweimeier, Ralf and Jeffrey, Alan},
  date = {1999-01-01},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  series = {{{MFPS XV}}, {{Mathematical Foundations}} of {{Progamming Semantics}}, {{Fifteenth Conference}}},
  volume = {20},
  pages = {481--511},
  issn = {1571-0661},
  doi = {10.1016/S1571-0661(04)80090-2},
  abstract = {This paper gives a formal basis for the closure conversion phase of functional programming languages with imperative features, using a graphical semantics for the language. We present normal forms of graphs, one corresponding to procedural languages, and one corresponding to object-oriented languages. Using closure conversion, we can prove normalization results for both normal forms. Thus, we obtain sound algorithms for compiling the language into either procedural or object-oriented code. We discuss efficiency issues of the translation and suggest some improvements on the algorithm.},
  langid = {english}
}

@incollection{selinger2011survey,
  title = {A {{Survey}} of {{Graphical Languages}} for {{Monoidal Categories}}},
  booktitle = {New {{Structures}} for {{Physics}}},
  author = {Selinger, Peter},
  editor = {Coecke, Bob},
  date = {2011},
  series = {Lecture {{Notes}} in {{Physics}}},
  pages = {289--355},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-12821-9_4},
  abstract = {This article is intended as a reference guide to various notions of monoidal categories and their associated string diagrams. It is hoped that this will be useful not just to mathematicians, but also to physicists, computer scientists, and others who use diagrammatic reasoning. We have opted for a somewhat informal treatment of topological notions, and have omitted most proofs. Nevertheless, the exposition is sufficiently detailed to make it clear what is presently known, and to serve as a starting place for more in-depth study. Where possible, we provide pointers to more rigorous treatments in the literature. Where we include results that have only been proved in special cases, we indicate this in the form of caveats.},
  isbn = {978-3-642-12821-9},
  langid = {english},
  keywords = {Graphical Language,Monoidal Category,Monoidal Functor,Reidemeister Move,Symmetric Monoidal Category}
}

@article{selinger2012finite,
  title = {Finite Dimensional {{Hilbert}} Spaces Are Complete for Dagger Compact Closed Categories},
  author = {Selinger, Peter},
  date = {2012-08-10},
  journaltitle = {Logical Methods in Computer Science},
  volume = {8},
  number = {3},
  publisher = {{Episciences.org}},
  doi = {10.2168/LMCS-8(3:6)2012},
  abstract = {We show that an equation follows from the axioms of dagger compact closed categories if and only if it holds in finite dimensional Hilbert spaces.},
  langid = {english}
}

@inproceedings{sheeran1984mufp,
  title = {{{muFP}}, a Language for {{VLSI}} Design},
  booktitle = {Proceedings of the 1984 {{ACM Symposium}} on {{LISP}} and Functional Programming},
  author = {Sheeran, Mary},
  date = {1984-08-06},
  series = {{{LFP}} '84},
  pages = {104--112},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/800055.802026},
  abstract = {In this paper, we present a VLSI design language μFP, which is a variant of Backus' FP [Backus 78, 81]. μFP differs from conventional VLSI design languages in that it can describe both the semantics (or behaviour) of a circuit and its layout (or floorplan) [Sheeran 83]. We chose to base our design language on FP for several reasons. Functional programs are easier to write and to reason about than imperative ones. We hope to bring some of these benefits to IC design. FP, in particular, is designed to allow the programmer to reason about his or her programs by manipulating the programs themselves. Likewise, in μFP, programs (or circuit descriptions) are just expressions “made” from a small number of primitive functions and combining forms (functionals that map functions into functions). These functions and combining forms (CFs) were chosen because they have nice algebraic properties. Thus, circuit descriptions are concise and can be easily manipulated using the algebraic laws of the language. Also, each CF has a simple geometric interpretation, so that every μFP expression has an associated floorplan. This interpretation exists because μFP expressions represent functions rather than objects, allowing us to associate a function with each section of the floorplan. Most VLSI design languages are designed either for layout description or for behavioural specification. μFP, with its dual interpretation, allows the designer to consider the effect on the final layout of a particular design decision or to manipulate the layout while keeping the semantics constant. In the following sections, we show how μFP is constructed from FP by the addition of a single combining form μ, which encapsulates a very simple notion of “state”.},
  isbn = {978-0-89791-142-9}
}

@inproceedings{simpson2000complete,
  title = {Complete Axioms for Categorical Fixed-Point Operators},
  booktitle = {Proceedings {{Fifteenth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{Cat}}. {{No}}.{{99CB36332}})},
  author = {Simpson, A. and Plotkin, G.},
  date = {2000-06},
  pages = {30--41},
  issn = {1043-6871},
  doi = {10.1109/LICS.2000.855753},
  abstract = {We give an axiomatic treatment of fixed-point operators in categories. A notion of iteration operator is defined embodying the equational properties of iteration theories. We prove a general completeness theorem for iteration operators, relying on a new, purely syntactic characterisation of the free iteration theory. We then show how iteration operators arise in axiomatic domain theory. One result derives them from the existence of sufficiently many bifree algebras (exploiting the universal property Freyd introduced in his notion of algebraic compactness). Another result shows that, in the presence of a parameterized natural numbers object and an equational lifting monad, any uniform fixed-point operator is necessarily an iteration operator.},
  eventtitle = {Proceedings {{Fifteenth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{Cat}}. {{No}}.{{99CB36332}})},
  keywords = {Equations,Informatics,National electric code}
}

@inproceedings{singh1996expressing,
  title = {Expressing Dynamic Reconfiguration by Partial Evaluation},
  booktitle = {1996 {{Proceedings IEEE Symposium}} on {{FPGAs}} for {{Custom Computing Machines}}},
  author = {{Singh} and {Hogg} and {McAuley}},
  date = {1996-04},
  pages = {188--194},
  doi = {10.1109/FPGA.1996.564830},
  abstract = {Dynamic reconfiguration of FPGAs is a powerful technique for modifying a circuit as it executes. However, dynamic reconfiguration is inadequately supported by CAD tools and poorly understood in general. We present a specific class of dynamic reconfigurations that can be expressed in terms of a formalism called partial evaluation. This provides a systematic framework for understanding the effect of a dynamic reconfiguration, as well as providing guidance on how to complete specialised circuits. The primary advantages of this technique are circuits which are smaller and faster for a certain class of applications. We present one case study from the ATM field which benefits from this treatment.},
  eventtitle = {1996 {{Proceedings IEEE Symposium}} on {{FPGAs}} for {{Custom Computing Machines}}},
  keywords = {Field programmable gate arrays}
}

@online{sobocinski2019cartographer,
  type = {Proceedings paper},
  title = {Cartographer: A {{Tool}} for {{String Diagrammatic Reasoning}}},
  shorttitle = {{{CARTOGRAPHER}}},
  author = {Sobociński, Paweł and Wilson, Paul and Zanasi, Fabio},
  date = {2019-11-22},
  volume = {139},
  pages = {20:1-20:7},
  publisher = {{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik}},
  location = {{Dagstuhl, Germany}},
  issn = {1868-8969},
  abstract = {We introduce Cartographer, a tool for editing and rewriting string diagrams of symmetric monoidal categories. Our approach is principled: the layout exploits the isomorphism between string diagrams and certain cospans of hypergraphs; the implementation of rewriting is based on the soundness and completeness of convex double-pushout rewriting for string diagram rewriting.},
  eventtitle = {8th {{Conference}} on {{Algebra}} and {{Coalgebra}} in {{Computer Science}} ({{CALCO}}), 3 to 6 {{June}} 2019, {{London}}, {{UK}}},
  langid = {english},
  organization = {{In: Roggenbach, M and Sokolova, A, (eds.) 8th Conference on Algebra and Coalgebra in Computer Science (CALCO 2019).  (pp. 20:1-20:7).  Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik: Dagstuhl, Germany. (2019)}}
}

@article{spivak2013operad,
  title = {The Operad of Wiring Diagrams: Formalizing a Graphical Language for Databases, Recursion, and Plug-and-Play Circuits},
  shorttitle = {The Operad of Wiring Diagrams},
  author = {Spivak, David I.},
  date = {2013-05-01},
  journaltitle = {CoRR},
  volume = {abs/1305.0297},
  eprint = {1305.0297},
  eprinttype = {arxiv},
  abstract = {Wiring diagrams, as seen in digital circuits, can be nested hierarchically and thus have an aspect of self-similarity. We show that wiring diagrams form the morphisms of an operad \$\textbackslash mcT\$, capturing this self-similarity. We discuss the algebra \$\textbackslash Rel\$ of mathematical relations on \$\textbackslash mcT\$, and in so doing use wiring diagrams as a graphical language with which to structure queries on relational databases. We give the example of circuit diagrams as a special case. We move on to show how plug-and-play devices and also recursion can be formulated in the operadic framework as well. Throughout we include many examples and figures.},
  archiveprefix = {arXiv},
  keywords = {18D50; 18A15; 18B10; 03B10; 03B70; 03D20; 68P15; 94C99,B.6,Computer Science - Databases,D.1.6,D.3.3,E.1,F.4.1,G.2.2,G.4,H.2.1,H.2.3,H.5,Mathematics - Category Theory,Mathematics - Logic}
}

@inproceedings{sprunger2019differentiable,
  title = {Differentiable {{Causal Computations}} via {{Delayed Trace}}},
  booktitle = {2019 34th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  author = {Sprunger, David and Katsumata, Shin-ya},
  date = {2019-06},
  pages = {1--12},
  doi = {10.1109/LICS.2019.8785670},
  abstract = {We investigate causal computations, which take sequences of inputs to sequences of outputs such that the nth output depends on the first n inputs only. We model these in category theory via a construction taking a Cartesian category \textbackslash mathbbC to another category St(\textbackslash mathbbC) with a novel trace-like operation called “delayed trace”, which misses yanking and dinaturality axioms of the usual trace. The delayed trace operation provides a feedback mechanism in St(\textbackslash mathbbC) with an implicit guardedness guarantee. When \textbackslash mathbbC is equipped with a Cartesian differential operator, we construct a differential operator for St (\textbackslash mathbbC) using an abstract version of backpropagation through time, a technique from machine learning based on unrolling of functions. This obtains a swath of properties for backpropagation through time, including a chain rule and Schwartz theorem. Our differential operator is also able to compute the derivative of a stateful network without requiring the network to be unrolled.},
  eventtitle = {2019 34th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  keywords = {Backpropagation,backpropagation through time,Cartesian differential categories,Computational modeling,delayed trace operators,Delays,Digital circuits,Logic gates,recurrent neural networks,Recurrent neural networks,signal flow graphs,Transducers}
}

@book{stefanescu2000network,
  title = {Network {{Algebra}}},
  author = {Stefanescu, Gheorghe},
  date = {2000-04-12},
  eprint = {m0juNZPkRKwC},
  eprinttype = {googlebooks},
  publisher = {{Springer Science \& Business Media}},
  abstract = {Network Algebra considers the algebraic study of networks and their behaviour. It contains general results on the algebraic theory of networks, recent results on the algebraic theory of models for parallel programs, as well as results on the algebraic theory of classical control structures. The results are presented in a unified framework of the calculus of flownomials, leading to a sound understanding of the algebraic fundamentals of the network theory. The term 'network' is used in a broad sense within this book, as consisting of a collection of interconnecting cells, and two radically different specific interpretations of this notion of networks are studied. One interpretation is additive, when only one cell is active at a given time - this covers the classical models of control specified by finite automata or flowchart schemes. The second interpretation is multiplicative, where each cell is always active, covering models for parallel computation such as Petri nets or dataflow networks. More advanced settings, mixing the two interpretations are included as well. Network Algebra will be of interest to anyone interested in network theory or its applications and provides them with the results needed to put their work on a firm basis. Graduate students will also find the material within this book useful for their studies.},
  isbn = {978-1-85233-195-5},
  langid = {english},
  pagetotal = {422},
  keywords = {Computers / Networking / Hardware,Computers / Programming / Algorithms,Mathematics / General,Mathematics / Numerical Analysis,Technology & Engineering / Telecommunications}
}

@book{stoltenberg-hansen1994mathematical,
  title = {Mathematical {{Theory}} of {{Domains}}},
  author = {Stoltenberg-Hansen, V. and Lindström, I. and Griffor, E. R.},
  date = {1994-09-22},
  eprint = {epb39s2wgt0C},
  eprinttype = {googlebooks},
  publisher = {{Cambridge University Press}},
  abstract = {"Domain theory is an established part of theoretical computer science, used in giving semantics to programming languages and logics. In mathematics and logic it has also proved to be useful in the study of algorithms. This book is devoted to providing a unified and self-contained treatment of the subject. The theory is presented in a mathematically precise manner which nevertheless is accessible to mathematicians and computer scientists alike. The authors begin with the basic theory including domain equations, various domain representations and universal domains. They then proceed to more specialized topics such as effective and power domains, models of lambda-calculus and so on. In particular, the connections with ultrametric spaces and the KleeneئKreisel continuous functionals are made precise. Consequently the text will be useful as an introductory textbook (earlier versions have been class-tested in Uppsala, Gothenburg, Passau, Munich and Swansea), or as a general reference for professionals in computer science and logic."--Publisher's website.},
  isbn = {978-0-521-38344-8},
  langid = {english},
  pagetotal = {366},
  keywords = {Computers / Languages / General,Computers / Software Development & Engineering / General,Mathematics / Discrete Mathematics,Mathematics / Logic}
}

@inproceedings{thompson2006bitlevel,
  title = {Bit-Level Partial Evaluation of Synchronous Circuits},
  booktitle = {Proceedings of the 2006 {{ACM SIGPLAN}} Symposium on {{Partial}} Evaluation and Semantics-Based Program Manipulation},
  author = {Thompson, Sarah and Mycroft, Alan},
  date = {2006-01-09},
  series = {{{PEPM}} '06},
  pages = {29--37},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1111542.1111548},
  abstract = {Partial evaluation has been known for some time to be very effective when applied to software; in this paper we demonstrate that it can also be usefully applied to hardware. We present a bit-level algorithm that supports the offline partial evaluation of synchronous digital circuits. Full PE of combinational logic is noted to be equivalent to Boolean minimisation. A loop unrolling technique, supporting both partial and full unrolling, is described. Experimental results are given, showing that partial evaluation of a simple micro-processor against a ROM image is equivalent to compiling the ROM program directly into low level hardware.},
  isbn = {978-1-59593-196-2},
  keywords = {loop unrolling,partial evaluation,synchronous circuits}
}

@incollection{wilsey1992developing,
  title = {Developing a {{Formal Semantic Definition}} of {{VHDL}}},
  booktitle = {{{VHDL}} for {{Simulation}}, {{Synthesis}} and {{Formal Proofs}} of {{Hardware}}},
  author = {Wilsey, Philip A.},
  editor = {Mermet, Jean},
  date = {1992},
  series = {The {{Kluwer International Series}} in {{Engineering}} and {{Computer Science}}},
  pages = {245--256},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4615-3562-1_17},
  abstract = {The work described in this paper is concerned with developing a formal semantic model of machine behavior that is compatible with the hardware description language VHDL. Currently, we have developed a formal model sufficiently robust to characterize many key components of VHDL. In particular, we have defined the propagation of signal values up and down the component hierarchy (complete with type conversion functions), bus resolution of signal values, process statements including the wait statement, transaction list definition, and the computation of driving values. The one main concept of VHDL yet to be included in this model is the delta delay.},
  isbn = {978-1-4615-3562-1},
  langid = {english},
  keywords = {Denotational Semantic,Hardware Description Language,Interval Temporal Logic,Semantic Definition,VHDL Description}
}

@unpublished{wilson2021cost,
  title = {The {{Cost}} of {{Compositionality}}: {{A High-Performance Implementation}} of {{String Diagram Composition}}},
  shorttitle = {The {{Cost}} of {{Compositionality}}},
  author = {Wilson, Paul and Zanasi, Fabio},
  date = {2021-05-19},
  eprint = {2105.09257},
  eprinttype = {arxiv},
  primaryclass = {cs, math},
  abstract = {String diagrams are an increasingly popular algebraic language for the analysis of graphical models of computations across different research fields. Whereas string diagrams have been thoroughly studied as semantic structures, much fewer attention has been given to their algorithmic properties, and efficient implementations of diagrammatic reasoning are almost an unexplored subject. This work intends to be a contribution in such direction. We introduce a data structure representing string diagrams in terms of adjacency matrices. This encoding has the key advantage of providing simple and efficient algorithms for composition and tensor product of diagrams. We demonstrate its effectiveness by showing that the complexity of the two operations is linear in the size of string diagrams. Also, as our approach is based on basic linear algebraic operations, we can take advantage of heavily optimised implementations, which we use to measure performances of string diagrammatic operations via several benchmarks.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Programming Languages,Mathematics - Category Theory}
}

@unpublished{wilson2022string,
  title = {String Diagrams for Non-Strict Monoidal Categories},
  author = {Wilson, Paul and Ghica, Dan and Zanasi, Fabio},
  date = {2022-01-27},
  eprint = {2201.11738},
  eprinttype = {arxiv},
  primaryclass = {math},
  abstract = {Whereas string diagrams for strict monoidal categories are well understood, and have found application in several fields of Computer Science, graphical formalisms for non-strict monoidal categories are far less studied. In this paper, we provide a presentation by generators and relations of string diagrams for non-strict monoidal categories, and show how this construction can handle applications in domains such as digital circuits and programming languages. We prove the correctness of our construction, which yields a novel proof of Mac Lane's strictness theorem. This in turn leads to an elementary graphical proof of Mac Lane's coherence theorem, and in particular allows for the inductive construction of the canonical isomorphisms in a monoidal category.},
  archiveprefix = {arXiv},
  keywords = {Mathematics - Category Theory}
}

@thesis{zanasi2015interacting,
  title = {Interacting {{Hopf Algebras}}: The Theory of Linear Systems},
  shorttitle = {Interacting {{Hopf Algebras}}},
  author = {Zanasi, Fabio},
  date = {2015-10-05},
  eprint = {1805.03032},
  eprinttype = {arxiv},
  institution = {{University of Lyon}},
  abstract = {As first main contribution, this thesis characterises the PROP SVk of linear subspaces over a field k - an important domain of interpretation for circuit diagrams appearing in diverse research areas. We present by generators and equations the PROP IH of string diagrams whose free model is SVk. IH stands for interacting Hopf algebras: its equations arise by distributive laws between Hopf algebras, which we obtain using Lack's technique for composing PROPs. The significance of the result is two-fold. First, it offers a canonical diagrammatic syntax for linear algebra: linear maps, kernels, subspaces, etc... are all faithfully represented in the graphical language. Second, the equations of IH describe familiar algebraic structures - Hopf algebras and Frobenius algebras - which are at the heart of graphical formalisms as seemingly diverse as quantum circuits, signal flow graphs, simple electrical circuits and Petri nets. Our characterisation enlightens the provenance of these axioms and reveals their linear algebraic nature. Our second main contribution is an application of IH to the semantics of signal processing circuits. We develop a formal theory of signal flow graphs, featuring a diagrammatic circuit syntax, a structural operational semantics and a denotational semantics. We prove completeness of the equations of IH for denotational equivalence. Also, we study full abstraction: it turns out that the purely operational picture is too concrete - two denotationally equal graphs may exhibit different operational behaviour. We classify the ways in which this can occur and show that any graph can be realised - rewritten, using the equations of IH, into an executable form where the operational behaviour and the denotation coincide. This realisability theorem suggests a reflection about the role of causality in the semantics of signal flow graphs and, more generally, of computing devices.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Mathematics - Rings and Algebras}
}

@article{zanasi2017rewriting,
  title = {Rewriting in {{Free Hypergraph Categories}}},
  author = {Zanasi, Fabio},
  date = {2017-12-22},
  journaltitle = {Electronic Proceedings in Theoretical Computer Science},
  shortjournal = {Electron. Proc. Theor. Comput. Sci.},
  volume = {263},
  eprint = {1712.09495},
  eprinttype = {arxiv},
  pages = {16--30},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.263.2},
  abstract = {We study rewriting for equational theories in the context of symmetric monoidal categories where there is a separable Frobenius monoid on each object. These categories, also called hypergraph categories, are increasingly relevant: Frobenius structures recently appeared in cross-disciplinary applications, including the study of quantum processes, dynamical systems and natural language processing. In this work we give a combinatorial characterisation of arrows of a free hypergraph category as cospans of labelled hypergraphs and establish a precise correspondence between rewriting modulo Frobenius structure on the one hand and double-pushout rewriting of hypergraphs on the other. This interpretation allows to use results on hypergraphs to ensure decidability of confluence for rewriting in a free hypergraph category. Our results generalise previous approaches where only categories generated by a single object (props) were considered.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science}
}


